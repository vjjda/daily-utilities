# Path: modules/stubgen/stubgen_core.py

"""
Core logic for the Stub Generator (sgen) module.
Handles Orchestration and .pyi content generation (Pure Logic).
(AST Parsing logic is in stubgen_parser.py)
"""

import logging
import ast
from pathlib import Path
from typing import Dict, Any, List, Optional, Set, Tuple, Final

# --- MODIFIED: Import các hàm Parser mới ---
from .stubgen_parser import (
    extract_module_list,
    collect_all_exported_symbols
)
# --- END MODIFIED ---

# Import Loader
from .stubgen_loader import find_gateway_files

# --- Type Hint cho Result ---
StubResult = Dict[str, Any]

__all__ = ["process_stubgen_logic"]


# --- MODIFIED: Đổi tên thành _format_stub_content ---
def _format_stub_content(
    init_path: Path, 
    project_root: Path, 
    all_exported_symbols: Set[str]
) -> str:
    """Generates the content string for the .pyi file."""
    
    # (Logic tạo chuỗi giữ nguyên, chỉ đổi tên hàm)
    
    if not all_exported_symbols:
        return ""

    # Build the .pyi content
    stub_lines: List[str] = []
    
    # Header
    rel_path = init_path.relative_to(project_root).as_posix()
    stub_lines.append(f"# Path: {rel_path}i (Auto-generated by sgen)")
    stub_lines.append(f"\"\"\"Statically declared API for {init_path.parent.name}\"\"\"")
    stub_lines.append("")
    stub_lines.append("from typing import Any, List, Optional, Set, Dict, Union")
    stub_lines.append("from pathlib import Path")
    stub_lines.append("")

    # Declarations (sorted alphabetically)
    for symbol in sorted(list(all_exported_symbols)):
        stub_lines.append(f"{symbol}: Any")

    # __all__ declaration
    stub_lines.append("")
    stub_lines.append("# Static declaration of exported symbols (for Pylance)")
    stub_lines.append(f"__all__: List[str] = {sorted(list(all_exported_symbols))!r}")

    return "\n".join(stub_lines)
# --- END MODIFIED ---

# --- MAIN ORCHESTRATOR ---
def process_stubgen_logic(
    logger: logging.Logger, 
    scan_root: Path,
    cli_ignore: Set[str],
    cli_restrict: Set[str],
    script_file_path: Path
) -> List[StubResult]:
    """
    Orchestrates the stub generation process (No I/O).
    1. Loads (finds files)
    2. Parses (analyzes AST)
    3. Formats (generates content)
    """
    
    # 1. Load: Tìm file gateway (sử dụng stubgen_loader.py)
    gateway_files = find_gateway_files(
        logger=logger, 
        scan_root=scan_root,
        cli_ignore=cli_ignore,
        cli_restrict=cli_restrict,
        script_file_path=script_file_path
    )
    
    if not gateway_files:
        return []
        
    results: List[StubResult] = []
    logger.info(f"✅ Found {len(gateway_files)} dynamic gateways to process.")

    for init_file in gateway_files:
        
        # --- MODIFIED: Sử dụng Parser ---
        # 2. Parse (AST): Lấy danh sách module con
        submodule_stems = extract_module_list(init_file)

        # 3. Parse (AST): Thu thập tất cả symbols
        exported_symbols = collect_all_exported_symbols(init_file, submodule_stems)
        # --- END MODIFIED ---
        
        if not exported_symbols:
            logger.warning(f"Skipping {init_file.name}: No exported symbols found.")
            continue

        # --- MODIFIED: Sử dụng Formatter ---
        # 4. Format: Tạo nội dung stub
        stub_content = _format_stub_content(
            init_file, 
            scan_root, 
            exported_symbols
        )
        # --- END MODIFIED ---

        stub_path = init_file.with_suffix(".pyi")
        
        # 5. Collate Pure Result (Không I/O)
        results.append({
            "init_path": init_file,
            "stub_path": stub_path,
            "content": stub_content,
            "symbols_count": len(exported_symbols),
            "rel_path": stub_path.relative_to(scan_root).as_posix()
        })
        
    return results