# Path: modules/stubgen/stubgen_core.py

"""
Core logic for the Stub Generator (sgen) module.
Handles Orchestration and .pyi content generation (Pure Logic).
(AST Parsing logic is in stubgen_parser.py)
"""

import logging
import ast
from pathlib import Path
from typing import Dict, Any, List, Optional, Set, Tuple, Final

# --- MODIFIED: Import các hàm Parser ---
from .stubgen_parser import (
    extract_module_list,
    collect_all_exported_symbols
)
# --- END MODIFIED ---

# --- MODIFIED: Import các hàm Loader ---
from .stubgen_loader import find_gateway_files
# --- END MODIFIED ---

# --- NEW: Import các hàm merge config ---
from utils.core import (
    resolve_config_value, 
    resolve_config_list, 
    parse_comma_list
)
# --- END NEW ---

# --- NEW: Import các hằng số DEFAULT ---
from .stubgen_config import (
    DEFAULT_IGNORE, 
    SCAN_ROOTS, 
    DYNAMIC_IMPORT_INDICATORS,
    AST_MODULE_LIST_NAME,
    AST_ALL_LIST_NAME
)
# --- END NEW ---


# --- Type Hint cho Result ---
StubResult = Dict[str, Any]

__all__ = ["process_stubgen_logic"]


def _format_stub_content(
    init_path: Path, 
    project_root: Path, 
    all_exported_symbols: Set[str]
) -> str:
    """Generates the content string for the .pyi file."""
    
    if not all_exported_symbols:
        return ""

    # Build the .pyi content
    stub_lines: List[str] = []
    
    # Header
    rel_path = init_path.relative_to(project_root).as_posix()
    stub_lines.append(f"# Path: {rel_path}i (Auto-generated by sgen)")
    stub_lines.append(f"\"\"\"Statically declared API for {init_path.parent.name}\"\"\"")
    stub_lines.append("")
    stub_lines.append("from typing import Any, List, Optional, Set, Dict, Union")
    stub_lines.append("from pathlib import Path")
    stub_lines.append("")

    # Declarations (sorted alphabetically)
    for symbol in sorted(list(all_exported_symbols)):
        stub_lines.append(f"{symbol}: Any")

    # __all__ declaration
    stub_lines.append("")
    stub_lines.append("# Static declaration of exported symbols (for Pylance)")
    stub_lines.append(f"__all__: List[str] = {sorted(list(all_exported_symbols))!r}")

    return "\n".join(stub_lines)

# --- MAIN ORCHESTRATOR ---
def process_stubgen_logic(
    logger: logging.Logger, 
    scan_root: Path,
    # --- MODIFIED: Nhận config thô ---
    cli_config: Dict[str, Optional[str]], # (Từ Typer args)
    file_config: Dict[str, Any],        # (Từ load_config_files)
    # --- END MODIFIED ---
    script_file_path: Path
) -> List[StubResult]:
    """
    Orchestrates the stub generation process (No I/O).
    1. Merges configs
    2. Loads (finds files)
    3. Parses (analyzes AST)
    4. Formats (generates content)
    """
    
    # --- 1. Merge Configs (CLI > File > Default) ---
    
    # 1.1. ignore (Set, Logic: CLI_Set + (File_List_Set or Default_Set))
    final_ignore_set = resolve_config_list(
        cli_str_value=cli_config.get('ignore'),
        file_list_value=file_config.get('ignore'),
        default_set_value=DEFAULT_IGNORE
    )
    
    # 1.2. restrict (List, Logic: CLI_Set or File_List or Default_List)
    # (Lưu ý: cli_config.get('restrict') là string, file_config.get('restrict') là list)
    cli_restrict_str = cli_config.get('restrict')
    final_restrict_list: List[str]
    if cli_restrict_str is not None:
        final_restrict_list = list(parse_comma_list(cli_restrict_str))
        logger.debug("Sử dụng danh sách 'restrict' từ CLI.")
    elif file_config.get('restrict') is not None:
        final_restrict_list = file_config['restrict']
        logger.debug("Sử dụng danh sách 'restrict' từ file config.")
    else:
        final_restrict_list = SCAN_ROOTS
        logger.debug("Sử dụng danh sách 'restrict' (SCAN_ROOTS) mặc định.")

    # 1.3. Core Logic Constants (Logic: File_Value or Default_Value)
    final_indicators = resolve_config_value(
        cli_value=None, # (Không thể set qua CLI)
        file_value=file_config.get('dynamic_import_indicators'),
        default_value=DYNAMIC_IMPORT_INDICATORS
    )
    final_module_list_name = resolve_config_value(
        cli_value=None,
        file_value=file_config.get('ast_module_list_name'),
        default_value=AST_MODULE_LIST_NAME
    )
    final_all_list_name = resolve_config_value(
        cli_value=None,
        file_value=file_config.get('ast_all_list_name'),
        default_value=AST_ALL_LIST_NAME
    )
    # --- Kết thúc Merge Configs ---


    # 2. Load: Tìm file gateway (sử dụng stubgen_loader.py)
    gateway_files = find_gateway_files(
        logger=logger, 
        scan_root=scan_root,
        # --- MODIFIED: Truyền các giá trị đã merge ---
        ignore_set=final_ignore_set,
        restrict_list=final_restrict_list,
        dynamic_import_indicators=final_indicators,
        # --- END MODIFIED ---
        script_file_path=script_file_path
    )
    
    if not gateway_files:
        return []
        
    results: List[StubResult] = []
    logger.info(f"✅ Found {len(gateway_files)} dynamic gateways to process.")

    for init_file in gateway_files:
        
        # --- MODIFIED: Sử dụng Parser với config đã merge ---
        # 3. Parse (AST): Lấy danh sách module con
        submodule_stems = extract_module_list(
            init_file, 
            ast_module_list_name=final_module_list_name
        )

        # 4. Parse (AST): Thu thập tất cả symbols
        exported_symbols = collect_all_exported_symbols(
            init_file, 
            submodule_stems, 
            ast_all_list_name=final_all_list_name
        )
        # --- END MODIFIED ---
        
        if not exported_symbols:
            logger.warning(f"Skipping {init_file.name}: No exported symbols found.")
            continue

        # 5. Format: Tạo nội dung stub
        stub_content = _format_stub_content(
            init_file, 
            scan_root, 
            exported_symbols
        )

        stub_path = init_file.with_suffix(".pyi")
        
        # 6. Collate Pure Result (Không I/O)
        results.append({
            "init_path": init_file,
            "stub_path": stub_path,
            "content": stub_content,
            "symbols_count": len(exported_symbols),
            "rel_path": stub_path.relative_to(scan_root).as_posix()
        })
        
    return results