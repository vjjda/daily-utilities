# Path: modules/stubgen/stubgen_core.py
"""
Core logic for the Stub Generator (sgen) module.
Handles Orchestration (Pure Logic).
"""

import logging
import ast
import argparse
from pathlib import Path
from typing import Dict, Any, List, Optional, Set, Tuple

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    import pathspec

# Import c√°c th√†nh ph·∫ßn c·ªßa module
from .stubgen_parser import (
    extract_module_list,
    collect_all_exported_symbols
)
from .stubgen_loader import find_gateway_files, load_config_files
from .stubgen_merger import merge_stubgen_configs
from .stubgen_formatter import format_stub_content

# Import ti·ªán √≠ch chung
from utils.core import (
    load_text_template,
    compile_spec_from_patterns
)

MODULE_DIR = Path(__file__).parent
TEMPLATE_FILENAME = "pyi.py.template"

StubResult = Dict[str, Any]

__all__ = ["process_stubgen_logic"]


# S·ª¨A: Thay ƒë·ªïi ch·ªØ k√Ω h√†m
def process_stubgen_logic(
    logger: logging.Logger, 
    cli_args: argparse.Namespace,
    script_file_path: Path,
    files_to_process: List[Path],
    dirs_to_scan: List[Path]
) -> List[StubResult]:
    """
    ƒêi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh t·∫°o stub (Logic thu·∫ßn t√∫y, kh√¥ng I/O ghi).
    X·ª≠ l√Ω c√°c file v√† th∆∞ m·ª•c ƒë·∫ßu v√†o theo logic c·ª•c b·ªô.
    """
    
    # 1. Load Template (I/O ƒê·ªçc)
    try:
        template_path = MODULE_DIR / TEMPLATE_FILENAME
        stub_template_str = load_text_template(template_path, logger)
    except Exception as e:
        logger.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i PYI template: {e}")
        raise

    all_results: List[StubResult] = []
    processed_files: Set[Path] = set()
    reporting_root = Path.cwd() # D√πng ƒë·ªÉ t√≠nh rel_path

    # --- 2. X·ª¨ L√ù C√ÅC FILE RI√äNG L·∫∫ ---
    if files_to_process:
        logger.info(f"--- üìÑ ƒêang x·ª≠ l√Ω {len(files_to_process)} file ri√™ng l·∫ª ---")
        
        # File l·∫ª d√πng config default + CLI
        file_config_data = {} # Kh√¥ng t·∫£i config
        cli_config = {
            "ignore": getattr(cli_args, 'ignore', None),
            "include": getattr(cli_args, 'include', None)
        }
        merged_config = merge_stubgen_configs(logger, cli_config, file_config_data)

        # Bi√™n d·ªãch spec cho file l·∫ª (d√πng CWD l√†m g·ªëc?) - T·ªët h∆°n l√† d√πng parent
        
        for file_path in files_to_process:
            resolved_file = file_path.resolve()
            if resolved_file in processed_files or file_path.name != "__init__.py":
                if file_path.name != "__init__.py":
                    logger.warning(f"‚ö†Ô∏è B·ªè qua file '{file_path.name}': 'sgen' ch·ªâ x·ª≠ l√Ω file '__init__.py'.")
                continue
                
            scan_dir = file_path.parent # G·ªëc c·ª•c b·ªô l√† th∆∞ m·ª•c cha
            
            # (Logic n√†y c√≥ th·ªÉ kh√¥ng ho√†n h·∫£o, v√¨ include/ignore c·ªßa file l·∫ª
            # kh√¥ng c√≥ b·ªëi c·∫£nh 'scan_root' r√µ r√†ng. T·∫°m th·ªùi ch·∫•p nh·∫≠n.)
            
            logger.info(f"  -> ‚ö° Ph√¢n t√≠ch file: {file_path.relative_to(reporting_root).as_posix()}")
            
            # Ch·∫°y logic ph√¢n t√≠ch/ƒë·ªãnh d·∫°ng
            stub_content, symbols_count = _process_single_gateway(
                init_file=file_path,
                scan_root=scan_dir, # D√πng th∆∞ m·ª•c cha l√†m g·ªëc
                merged_config=merged_config,
                stub_template_str=stub_template_str,
                logger=logger
            )
            
            if stub_content:
                stub_path = file_path.with_suffix(".pyi")
                all_results.append({
                    "init_path": file_path,
                    "stub_path": stub_path,
                    "content": stub_content,
                    "symbols_count": symbols_count,
                    "rel_path": stub_path.relative_to(reporting_root).as_posix()
                })
            processed_files.add(resolved_file)
        
        logger.info("") # D√≤ng tr·ªëng

    # --- 3. X·ª¨ L√ù C√ÅC TH∆Ø M·ª§C ---
    if dirs_to_scan:
        logger.info(f"ƒêang x·ª≠ l√Ω {len(dirs_to_scan)} th∆∞ m·ª•c...")

    for scan_dir in dirs_to_scan:
        logger.info(f"--- üìÅ Qu√©t th∆∞ m·ª•c: {scan_dir.name} ---")
        
        # 3a. T·∫£i v√† H·ª£p nh·∫•t Config (c·ª•c b·ªô)
        file_config = load_config_files(scan_dir, logger)
        cli_config = {
            "ignore": getattr(cli_args, 'ignore', None),
            "include": getattr(cli_args, 'include', None)
        }
        merged_config = merge_stubgen_configs(logger, cli_config, file_config)

        # 3b. Bi√™n d·ªãch Specs
        final_include_spec: Optional['pathspec.PathSpec'] = compile_spec_from_patterns(
            merged_config["include_list"], 
            scan_dir # D√πng scan_dir l√†m g·ªëc
        )
        
        # 3c. Load: T√¨m file gateway (I/O ƒê·ªçc)
        gateway_files, scan_status = find_gateway_files(
            logger=logger, 
            scan_root=scan_dir, # D√πng scan_dir l√†m g·ªëc
            ignore_list=merged_config["ignore_list"], 
            include_spec=final_include_spec,
            dynamic_import_indicators=merged_config["indicators"],
            script_file_path=script_file_path
        )
        
        # 3d. In b√°o c√°o c·∫•u h√¨nh (gi·ªëng ndoc)
        logger.info(f"  [C·∫•u h√¨nh √°p d·ª•ng]")
        logger.info(f"    - Ignore (t·ª´ config/CLI): {merged_config['ignore_list']}")
        logger.info(f"    - Include (t·ª´ config/CLI): {merged_config['include_list']}")
        logger.info(f"    - T·∫£i .gitignore c·ª•c b·ªô: {'C√≥' if scan_status['gitignore_found'] else 'Kh√¥ng'}")
        logger.info(f"    - T·∫£i .gitmodules c·ª•c b·ªô: {'C√≥' if scan_status['gitmodules_found'] else 'Kh√¥ng'}")
        
        if not gateway_files:
            logger.info(f"  -> ü§∑ Kh√¥ng t√¨m th·∫•y file '__init__.py' (gateway ƒë·ªông) n√†o kh·ªõp ti√™u ch√≠.")
            logger.info(f"--- ‚úÖ K·∫øt th√∫c {scan_dir.name} ---")
            logger.info("")
            continue
        
        logger.info(f"  -> ‚ö° T√¨m th·∫•y {len(gateway_files)} gateway, ƒëang ph√¢n t√≠ch...")
        
        dir_results: List[StubResult] = []
        for init_file in gateway_files:
            resolved_file = init_file.resolve()
            if resolved_file in processed_files:
                continue

            # 3e. Ph√¢n t√≠ch & ƒê·ªãnh d·∫°ng
            stub_content, symbols_count = _process_single_gateway(
                init_file=init_file,
                scan_root=scan_dir, # D√πng scan_dir l√†m g·ªëc
                merged_config=merged_config,
                stub_template_str=stub_template_str,
                logger=logger
            )
            
            if stub_content:
                stub_path = init_file.with_suffix(".pyi")
                dir_results.append({
                    "init_path": init_file,
                    "stub_path": stub_path,
                    "content": stub_content,
                    "symbols_count": symbols_count,
                    "rel_path": stub_path.relative_to(reporting_root).as_posix()
                })
            processed_files.add(resolved_file)
        
        if dir_results:
            # (sgen kh√¥ng c√≥ h√†m in xen k·∫Ω, n√≥ ƒë·ª£i executor)
            all_results.extend(dir_results)
            
        logger.info(f"--- ‚úÖ K·∫øt th√∫c {scan_dir.name} ---")
        logger.info("")

    return all_results


def _process_single_gateway(
    init_file: Path,
    scan_root: Path,
    merged_config: Dict[str, Any],
    stub_template_str: str,
    logger: logging.Logger
) -> Tuple[Optional[str], int]:
    """H√†m helper n·ªôi b·ªô ƒë·ªÉ ch·∫°y logic Parse/Format cho m·ªôt file gateway."""
    
    try:
        # 7. Parse (AST)
        submodule_stems = extract_module_list(
            init_file, 
            ast_module_list_name=merged_config["module_list_name"]
        )
        exported_symbols = collect_all_exported_symbols(
            init_file, 
            submodule_stems, 
            ast_all_list_name=merged_config["all_list_name"]
        )
        
        if not exported_symbols:
            logger.warning(f"B·ªè qua {init_file.name}: Kh√¥ng t√¨m th·∫•y symbols n√†o ƒë·ªÉ export.")
            return None, 0

        # 8. Format (g·ªçi Formatter)
        stub_content = format_stub_content(
            init_file, 
            scan_root, # G·ªëc c·ª•c b·ªô
            exported_symbols,
            stub_template_str 
        )
        return stub_content, len(exported_symbols)
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω file {init_file.name}: {e}")
        return None, 0