# Path: modules/stubgen/stubgen_core.py
"""
Core logic for the Stub Generator (sgen) module.
Handles Orchestration (Pure Logic).
"""

import logging
import ast
import argparse
from pathlib import Path
from typing import Dict, Any, List, Optional, Set, Tuple

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    import pathspec

# S·ª¨A: Import t·ª´ facade n·ªôi b·ªô '.stubgen_internal'
from .stubgen_internal import (
    extract_module_list,
    collect_all_exported_symbols,
    find_gateway_files, 
    load_config_files,
    merge_stubgen_configs,
    format_stub_content
)

# Import c√°c th√†nh ph·∫ßn c√≤n l·∫°i
from .stubgen_executor import classify_and_report_stub_changes

# Import ti·ªán √≠ch chung
from utils.core import (
    load_text_template,
    compile_spec_from_patterns
)

MODULE_DIR = Path(__file__).parent
TEMPLATE_FILENAME = "pyi.py.template"

StubResult = Dict[str, Any]

__all__ = ["process_stubgen_logic"]

# ... (To√†n b·ªô ph·∫ßn c√≤n l·∫°i c·ªßa file _process_single_gateway,
# _process_stubgen_task_file, _process_stubgen_task_dir,
# v√† process_stubgen_logic kh√¥ng thay ƒë·ªïi) ...

def _process_single_gateway(
    init_file: Path,
    scan_root: Path,
    merged_config: Dict[str, Any],
    stub_template_str: str,
    logger: logging.Logger
) -> Tuple[Optional[str], int]:
    """
    (HELPER 1)
    Ch·∫°y logic Parse/Format cho m·ªôt file gateway duy nh·∫•t.
    """
    
    try:
        # 1. Parse (AST)
        submodule_stems = extract_module_list(
            init_file, 
            ast_module_list_name=merged_config["module_list_name"]
        )
        exported_symbols = collect_all_exported_symbols(
            init_file, 
            submodule_stems, 
            ast_all_list_name=merged_config["all_list_name"]
        )
        
        if not exported_symbols:
            return None, 0

        # 2. Format (g·ªçi Formatter)
        stub_content = format_stub_content(
            init_file, 
            scan_root, # G·ªëc c·ª•c b·ªô
            exported_symbols,
            stub_template_str 
        )
        return stub_content, len(exported_symbols)
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω file {init_file.name}: {e}")
        return None, 0


def _process_stubgen_task_file(
    file_path: Path,
    cli_args: argparse.Namespace,
    stub_template_str: str,
    logger: logging.Logger,
    processed_files: Set[Path],
    reporting_root: Path
) -> Tuple[List[StubResult], List[StubResult]]:
    """
    (HELPER 2)
    X·ª≠ l√Ω logic sgen cho m·ªôt file __init__.py ri√™ng l·∫ª.
    """
    logger.info(f"--- üìÑ ƒêang x·ª≠ l√Ω file: {file_path.relative_to(reporting_root).as_posix()} ---")
    
    resolved_file = file_path.resolve()
    if resolved_file in processed_files:
        logger.info("   -> B·ªè qua (ƒë√£ x·ª≠ l√Ω).")
        logger.info("")
        return [], []
        
    if file_path.name != "__init__.py":
        logger.warning(f"‚ö†Ô∏è B·ªè qua file '{file_path.name}': 'sgen' ch·ªâ x·ª≠ l√Ω file '__init__.py'.")
        logger.info("")
        return [], []

    # 2. H·ª£p nh·∫•t Config (Default + CLI)
    file_config_data = {} 
    cli_config = {
        "ignore": getattr(cli_args, 'ignore', None),
        "include": getattr(cli_args, 'include', None)
    }
    merged_config = merge_stubgen_configs(logger, cli_config, file_config_data)
    scan_dir = file_path.parent
    
    logger.info(f"  [C·∫•u h√¨nh √°p d·ª•ng]")
    logger.info(f"    - Ignore (t·ª´ config/CLI): {merged_config['ignore_list']}")
    logger.info(f"    - Include (t·ª´ config/CLI): {merged_config['include_list']}")
    logger.info(f"    - (B·ªè qua .gitignore v√† config file)")

    # 3. Ph√¢n t√≠ch & ƒê·ªãnh d·∫°ng
    stub_content, symbols_count = _process_single_gateway(
        init_file=file_path,
        scan_root=scan_dir,
        merged_config=merged_config,
        stub_template_str=stub_template_str,
        logger=logger
    )
    
    processed_files.add(resolved_file)
    file_raw_results: List[StubResult] = []
    
    if stub_content:
        stub_path = file_path.with_suffix(".pyi")
        file_raw_results.append({
            "init_path": file_path,
            "stub_path": stub_path,
            "content": stub_content,
            "symbols_count": symbols_count,
            "rel_path": stub_path.relative_to(reporting_root).as_posix()
        })
    else:
        logger.warning(f"  -> ü§∑ Kh√¥ng t√¨m th·∫•y symbols n√†o trong: {file_path.name}")

    # 4. Ph√¢n lo·∫°i v√† B√°o c√°o
    create, overwrite, _ = classify_and_report_stub_changes(
        logger, file_path.name, file_raw_results, reporting_root
    )
    logger.info("")
    
    return create, overwrite


def _process_stubgen_task_dir(
    scan_dir: Path,
    cli_args: argparse.Namespace,
    stub_template_str: str,
    logger: logging.Logger,
    processed_files: Set[Path],
    reporting_root: Path,
    script_file_path: Path
) -> Tuple[List[StubResult], List[StubResult]]:
    """
    (HELPER 3)
    X·ª≠ l√Ω logic sgen cho m·ªôt th∆∞ m·ª•c ƒë·∫ßu v√†o.
    """
    logger.info(f"--- üìÅ Qu√©t th∆∞ m·ª•c: {scan_dir.name} ---")
    
    # 1. T·∫£i/Merge Config (c·ª•c b·ªô)
    file_config = load_config_files(scan_dir, logger)
    cli_config = {
        "ignore": getattr(cli_args, 'ignore', None),
        "include": getattr(cli_args, 'include', None)
    }
    merged_config = merge_stubgen_configs(logger, cli_config, file_config)

    # 2. Bi√™n d·ªãch Specs
    final_include_spec: Optional['pathspec.PathSpec'] = compile_spec_from_patterns(
        merged_config["include_list"], 
        scan_dir
    )
    
    # 3. Load: T√¨m file gateway
    gateway_files, scan_status = find_gateway_files(
        logger=logger, 
        scan_root=scan_dir,
        ignore_list=merged_config["ignore_list"], 
        include_spec=final_include_spec,
        dynamic_import_indicators=merged_config["indicators"],
        script_file_path=script_file_path
    )
    
    # 4. In b√°o c√°o c·∫•u h√¨nh
    logger.info(f"  [C·∫•u h√¨nh √°p d·ª•ng]")
    logger.info(f"    - Ignore (t·ª´ config/CLI): {merged_config['ignore_list']}")
    logger.info(f"    - Include (t·ª´ config/CLI): {merged_config['include_list']}")
    logger.info(f"    - T·∫£i .gitignore c·ª•c b·ªô: {'C√≥' if scan_status['gitignore_found'] else 'Kh√¥ng'}")
    logger.info(f"    - T·∫£i .gitmodules c·ª•c b·ªô: {'C√≥' if scan_status['gitmodules_found'] else 'Kh√¥ng'}")
    
    if not gateway_files:
        logger.info(f"  -> ü§∑ Kh√¥ng t√¨m th·∫•y file '__init__.py' (gateway ƒë·ªông) n√†o kh·ªõp ti√™u ch√≠.")
        logger.info(f"--- ‚úÖ K·∫øt th√∫c {scan_dir.name} ---")
        logger.info("")
        return [], []
    
    logger.info(f"  -> ‚ö° T√¨m th·∫•y {len(gateway_files)} gateway, ƒëang ph√¢n t√≠ch...")
    
    # 5. Ph√¢n t√≠ch & ƒê·ªãnh d·∫°ng
    dir_raw_results: List[StubResult] = []
    for init_file in gateway_files:
        resolved_file = init_file.resolve()
        if resolved_file in processed_files:
            continue

        stub_content, symbols_count = _process_single_gateway(
            init_file=init_file,
            scan_root=scan_dir, 
            merged_config=merged_config,
            stub_template_str=stub_template_str,
            logger=logger
        )
        
        if stub_content:
            stub_path = init_file.with_suffix(".pyi")
            dir_raw_results.append({
                "init_path": init_file,
                "stub_path": stub_path,
                "content": stub_content,
                "symbols_count": symbols_count,
                "rel_path": stub_path.relative_to(reporting_root).as_posix()
            })
        processed_files.add(resolved_file)
    
    # 6. Ph√¢n lo·∫°i v√† B√°o c√°o
    create, overwrite, _ = classify_and_report_stub_changes(
        logger, scan_dir.name, dir_raw_results, reporting_root
    )
        
    logger.info(f"--- ‚úÖ K·∫øt th√∫c {scan_dir.name} ---")
    logger.info("")
    
    return create, overwrite


def process_stubgen_logic(
    logger: logging.Logger, 
    cli_args: argparse.Namespace,
    script_file_path: Path,
    files_to_process: List[Path],
    dirs_to_scan: List[Path]
) -> Tuple[List[StubResult], List[StubResult]]:
    """
    ƒêi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh t·∫°o stub (Logic thu·∫ßn t√∫y, kh√¥ng I/O ghi).
    X·ª≠ l√Ω c√°c file v√† th∆∞ m·ª•c ƒë·∫ßu v√†o theo logic c·ª•c b·ªô.
    
    Returns:
        Tuple[List[StubResult], List[StubResult]]:
            - all_files_to_create
            - all_files_to_overwrite
    """
    
    # 1. Load Template (m·ªôt l·∫ßn)
    try:
        template_path = MODULE_DIR / TEMPLATE_FILENAME
        stub_template_str = load_text_template(template_path, logger)
    except Exception as e:
        logger.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i PYI template: {e}")
        raise

    total_files_to_create: List[StubResult] = []
    total_files_to_overwrite: List[StubResult] = []
    processed_files: Set[Path] = set()
    reporting_root = Path.cwd()

    # 2. X·ª¨ L√ù C√ÅC FILE RI√äNG L·∫∫
    if files_to_process:
        for file_path in files_to_process:
            create, overwrite = _process_stubgen_task_file(
                file_path=file_path,
                cli_args=cli_args,
                stub_template_str=stub_template_str,
                logger=logger,
                processed_files=processed_files,
                reporting_root=reporting_root
            )
            total_files_to_create.extend(create)
            total_files_to_overwrite.extend(overwrite)

    # 3. X·ª¨ L√ù C√ÅC TH∆Ø M·ª§C
    if dirs_to_scan:
        logger.info(f"ƒêang x·ª≠ l√Ω {len(dirs_to_scan)} th∆∞ m·ª•c...")
        for scan_dir in dirs_to_scan:
            create, overwrite = _process_stubgen_task_dir(
                scan_dir=scan_dir,
                cli_args=cli_args,
                stub_template_str=stub_template_str,
                logger=logger,
                processed_files=processed_files,
                reporting_root=reporting_root,
                script_file_path=script_file_path
            )
            total_files_to_create.extend(create)
            total_files_to_overwrite.extend(overwrite)

    return total_files_to_create, total_files_to_overwrite