# Path: modules/stubgen/stubgen_executor.py
"""
Execution/Action logic for the Stub Generator (sgen) module.
(Side-effects: B√°o c√°o, X√°c nh·∫≠n ng∆∞·ªùi d√πng, Ghi file, Git commit)
"""

import logging
import sys
from pathlib import Path
from typing import Dict, Any, List, Optional

from utils.logging_config import log_success
from utils.core import git_add_and_commit

# Type Hint cho Result Object
StubResult = Dict[str, Any]

__all__ = ["execute_stubgen_action"]


def execute_stubgen_action(
    logger: logging.Logger, 
    results: List[StubResult],
    force: bool,
    scan_root: Path
) -> None:
    """
    H√†m th·ª±c thi, nh·∫≠n k·∫øt qu·∫£ t·ª´ core, x·ª≠ l√Ω t∆∞∆°ng t√°c v√† ghi file.
    Lu·ªìng x·ª≠ l√Ω:
    1. Ph√¢n lo·∫°i file (create, overwrite, no_change) b·∫±ng c√°ch ƒë·ªçc I/O.
    2. B√°o c√°o cho ng∆∞·ªùi d√πng.
    3. H·ªèi x√°c nh·∫≠n (n·∫øu `force=False`).
    4. Ghi file (I/O Ghi).
    5. T·ª± ƒë·ªông `git add` v√† `git commit` c√°c file ƒë√£ thay ƒë·ªïi.
    Args:
        logger: Logger.
        results: Danh s√°ch StubResult t·ª´ core.
        force: C·ªù --force t·ª´ CLI.
        scan_root: Th∆∞ m·ª•c g·ªëc (d√πng ƒë·ªÉ t√≠nh relpath v√† ch·∫°y git).
    """
    
    if not results:
        return

    # 1. Ph√¢n lo·∫°i file (I/O ƒê·ªçc)
    files_to_create: List[StubResult] = []
    files_to_overwrite: List[StubResult] = []
    files_no_change: List[StubResult] = []

    logger.debug("Categorizing stub files (Read I/O)...")
    for result in results:
        stub_path: Path = result["stub_path"]
        new_content: str = result["content"]

        if not stub_path.exists():
            files_to_create.append(result)
        else:
            try:
                existing_content = stub_path.read_text(encoding='utf-8')
                if existing_content == new_content:
                    files_no_change.append(result)
                else:
                    files_to_overwrite.append(result)
            except Exception as e:
                logger.warning(f"Could not read existing stub {stub_path.name}: {e}")
                files_to_overwrite.append(result)

    # 2. B√°o c√°o cho ng∆∞·ªùi d√πng
    if files_no_change:
        logger.info(f"\n‚úÖ Files up-to-date ({len(files_no_change)}):")
        for r in files_no_change:
            logger.info(f"   -> OK: {r['rel_path']} ({r['symbols_count']} symbols)")
    
    if files_to_create:
        logger.info(f"\nüìù Files to create ({len(files_to_create)}):")
        for r in files_to_create:
            logger.info(f"   -> NEW: {r['rel_path']} ({r['symbols_count']} symbols)")

    if files_to_overwrite:
        logger.warning(f"\n‚ö†Ô∏è Files to OVERWRITE ({len(files_to_overwrite)}):")
        for r in files_to_overwrite:
            logger.warning(f"   -> OVERWRITE: {r['rel_path']} ({r['symbols_count']} symbols)")

    if not (files_to_create or files_to_overwrite):
        log_success(logger, "\n‚ú® Stub generation complete. All stubs are up-to-date.")
        return 
    
    # 3. H·ªèi x√°c nh·∫≠n
    proceed_to_write = False
    if force:
        proceed_to_write = True
    else:
        try:
            confirmation = input("\nProceed to generate/overwrite these stubs? (y/n): ")
        except (EOFError, KeyboardInterrupt):
            confirmation = "n"

        if confirmation.lower() == "y":
            proceed_to_write = True
        else:
            logger.warning("Stub generation operation cancelled by user.")
            sys.exit(0)
    
    # 4. Ghi file (I/O Write)
    if proceed_to_write:
        written_count = 0
        files_written_results: List[StubResult] = []
        result_being_processed: Optional[StubResult] = None # ƒê·ªÉ debug khi l·ªói
        
        logger.info("‚úçÔ∏è Writing .pyi stub files...")
        
        try:
            # V√≤ng 1: T·∫°o file m·ªõi
            for result in files_to_create:
                result_being_processed = result
                stub_path: Path = result["stub_path"]
                content: str = result["content"]
                stub_path.write_text(content, encoding='utf-8')
                log_success(logger, f"Created stub: {result['rel_path']}")
                written_count += 1
                files_written_results.append(result)
                
            # V√≤ng 2: Ghi ƒë√® file
            for result in files_to_overwrite:
                result_being_processed = result
                stub_path: Path = result["stub_path"]
                content: str = result["content"]
                stub_path.write_text(content, encoding='utf-8')
                log_success(logger, f"Overwrote stub: {result['rel_path']}")
                written_count += 1
                files_written_results.append(result)
                
        except IOError as e:
            file_name = result_being_processed['rel_path'] if result_being_processed else "UNKNOWN FILE"
            logger.error(f"‚ùå Failed to write file {file_name}: {e}")
            return 
        except Exception as e:
            file_name = result_being_processed['rel_path'] if result_being_processed else "UNKNOWN FILE"
            logger.error(f"‚ùå Unknown error while writing file {file_name}: {e}")
            return 
                
        if written_count > 0:
            log_success(logger, f"\n‚ú® Stub generation complete. Successfully processed {written_count} files.")
        else:
            log_success(logger, f"\n‚ú® Stub generation complete. No files needed writing.")

        # 5. T·ª± ƒë·ªông Git Commit
        if files_written_results:
            # 1. Chu·∫©n b·ªã danh s√°ch ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
            relative_paths = [
                str(r["stub_path"].relative_to(scan_root)) 
                for r in files_written_results
            ]
            
            # 2. T·∫°o commit message
            commit_msg = f"style(stubs): C·∫≠p nh·∫≠t {len(relative_paths)} file .pyi (t·ª± ƒë·ªông b·ªüi sgen)"
            
            # 3. G·ªçi h√†m utils
            git_add_and_commit(
                logger=logger,
                scan_root=scan_root,
                file_paths_relative=relative_paths,
                commit_message=commit_msg
            )