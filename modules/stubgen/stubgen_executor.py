# Path: modules/stubgen/stubgen_executor.py

"""
Execution/Action logic for the Stub Generator (sgen) module.
Handles reporting, user confirmation, and file writing (I/O).
"""

import logging
import sys
from pathlib import Path
from typing import Dict, Any, List

import typer

from utils.logging_config import log_success
# --- NEW IMPORTS ---
from utils.core import run_command, is_git_repository
# --- END NEW ---

# --- Type Hint cho Result ---
StubResult = Dict[str, Any]

__all__ = ["execute_stubgen_action"]

# --- NEW HELPER FUNCTION ---
def _handle_git_commit(
    logger: logging.Logger, 
    files_changed: List[StubResult], 
    scan_root: Path
) -> None:
    """Ki·ªÉm tra, 'git add' v√† 'git commit' c√°c file .pyi ƒë√£ thay ƒë·ªïi."""
    
    if not files_changed:
        logger.debug("Kh√¥ng c√≥ file .pyi n√†o thay ƒë·ªïi, b·ªè qua commit.")
        return

    # 1. Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† Git repo kh√¥ng
    if not is_git_repository(scan_root):
        logger.warning("‚ö†Ô∏è  B·ªè qua auto-commit: Th∆∞ m·ª•c qu√©t kh√¥ng ph·∫£i l√† g·ªëc c·ªßa Git repo.")
        return

    # 2. Thu th·∫≠p ƒë∆∞·ªùng d·∫´n file
    file_paths_to_add: List[str] = [str(r["stub_path"].resolve()) for r in files_changed]
    
    try:
        logger.info(f"ƒêang th·ª±c hi·ªán 'git add' cho {len(file_paths_to_add)} file .pyi...")
        
        # 3. Git Add
        add_command: List[str] = ["git", "add"] + file_paths_to_add
        add_success, add_out = run_command(
            add_command, logger, "Staging .pyi files"
        )
        if not add_success:
            logger.error("‚ùå L·ªói khi 'git add' file .pyi.")
            return

        # 4. Git Commit
        commit_count = len(file_paths_to_add)
        commit_msg = f"style(stubs): C·∫≠p nh·∫≠t {commit_count} file .pyi (t·ª± ƒë·ªông b·ªüi sgen)"
        
        commit_command: List[str] = ["git", "commit", "-m", commit_msg]
        commit_success, commit_out = run_command(
            commit_command, logger, "Committing .pyi files"
        )
        
        if commit_success:
            log_success(logger, f"ƒê√£ commit th√†nh c√¥ng: {commit_msg}")
        elif "nothing to commit" in commit_out:
            logger.info("Kh√¥ng c√≥ thay ƒë·ªïi .pyi n√†o ƒë·ªÉ commit.")
        else:
            logger.error("‚ùå L·ªói khi 'git commit' file .pyi.")

    except Exception as e:
        logger.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi th·ª±c thi Git: {e}")
# --- END NEW HELPER ---


def execute_stubgen_action(
    logger: logging.Logger, 
    results: List[StubResult], # <-- Nh·∫≠n danh s√°ch "pure" t·ª´ core
    force: bool,
    # --- MODIFIED: Nh·∫≠n scan_root ---
    scan_root: Path
    # --- END MODIFIED ---
) -> None:
    """
    H√†m th·ª±c thi, nh·∫≠n k·∫øt qu·∫£ t·ª´ core, x·ª≠ l√Ω t∆∞∆°ng t√°c v√† ghi file.
    """
    
    if not results:
        return

    # --- NEW: Logic ph√¢n lo·∫°i (I/O Read) ---
    files_to_create: List[StubResult] = []
    files_to_overwrite: List[StubResult] = []
    files_no_change: List[StubResult] = []

    logger.debug("Categorizing stub files (Read I/O)...")
    for result in results:
        stub_path: Path = result["stub_path"]
        new_content: str = result["content"]

        if not stub_path.exists():
            files_to_create.append(result)
        else:
            try:
                # ƒê·ªçc n·ªôi dung file .pyi hi·ªán c√≥
                existing_content = stub_path.read_text(encoding='utf-8')
                if existing_content == new_content:
                    files_no_change.append(result)
                else:
                    files_to_overwrite.append(result)
            except Exception as e:
                # L·ªói khi ƒë·ªçc file, coi nh∆∞ c·∫ßn overwrite
                logger.warning(f"Could not read existing stub {stub_path.name}: {e}")
                files_to_overwrite.append(result)
    # --- END NEW ---


    # 1. B√°o c√°o k·∫øt qu·∫£ (Logic gi·ªØ nguy√™n, ch·ªâ ƒë·ªïi t√™n bi·∫øn)
    if files_no_change:
        logger.info(f"\n‚úÖ Files up-to-date ({len(files_no_change)}):")
        for r in files_no_change:
            logger.info(f"   -> OK: {r['rel_path']} ({r['symbols_count']} symbols)")
    
    if files_to_create:
        logger.info(f"\nüìù Files to create ({len(files_to_create)}):")
        for r in files_to_create:
            logger.info(f"   -> NEW: {r['rel_path']} ({r['symbols_count']} symbols)")

    if files_to_overwrite:
        logger.warning(f"\n‚ö†Ô∏è Files to OVERWRITE ({len(files_to_overwrite)}):")
        for r in files_to_overwrite:
            logger.warning(f"   -> OVERWRITE: {r['rel_path']} ({r['symbols_count']} symbols)")

    # 2. X·ª≠ l√Ω t∆∞∆°ng t√°c (Logic gi·ªØ nguy√™n)
    if not (files_to_create or files_to_overwrite):
        log_success(logger, "\n‚ú® Stub generation complete. All stubs are up-to-date.")
        return # Tho√°t s·ªõm
    
    # --- MODIFIED: ƒêi·ªÅu ch·ªânh kh·ªëi logic x√°c nh·∫≠n ---
    proceed_to_write = False
    if force:
        proceed_to_write = True
    else:
        try:
            confirmation = input("\nProceed to generate/overwrite these stubs? (y/n): ")
        except (EOFError, KeyboardInterrupt):
            confirmation = "n"

        if confirmation.lower() == "y":
            proceed_to_write = True
        else:
            logger.warning("Stub generation operation cancelled by user.")
            sys.exit(0)
    
    # 3. Ghi file (I/O Write) - Ch·ªâ ch·∫°y n·∫øu ng∆∞·ªùi d√πng ƒë·ªìng √Ω (ho·∫∑c --force)
    if proceed_to_write:
        written_count = 0
        files_changed_for_git: List[StubResult] = []
        
        logger.info("‚úçÔ∏è Writing .pyi stub files...")
        
        try:
            # V√≤ng 1: T·∫°o file m·ªõi
            for result in files_to_create:
                stub_path: Path = result["stub_path"]
                content: str = result["content"]
                stub_path.write_text(content, encoding='utf-8')
                log_success(logger, f"Created stub: {result['rel_path']}")
                written_count += 1
                files_changed_for_git.append(result) # <-- Thu th·∫≠p file ƒë√£ thay ƒë·ªïi
                
            # V√≤ng 2: Ghi ƒë√® file
            for result in files_to_overwrite:
                stub_path: Path = result["stub_path"]
                content: str = result["content"]
                stub_path.write_text(content, encoding='utf-8')
                log_success(logger, f"Overwrote stub: {result['rel_path']}")
                written_count += 1
                files_changed_for_git.append(result) # <-- Thu th·∫≠p file ƒë√£ thay ƒë·ªïi
                
        except IOError as e:
            logger.error(f"‚ùå Failed to write file {result['rel_path']}: {e}") # type: ignore
            return # D·ª´ng l·∫°i n·∫øu c√≥ l·ªói I/O
        except Exception as e:
            logger.error(f"‚ùå Unknown error while writing file {result['rel_path']}: {e}") # type: ignore
            return # D·ª´ng l·∫°i n·∫øu c√≥ l·ªói
                
        if written_count > 0:
            log_success(logger, f"\n‚ú® Stub generation complete. Successfully processed {written_count} files.")
        else:
            log_success(logger, f"\n‚ú® Stub generation complete. No files needed writing.")

        # --- NEW: G·ªçi auto-commit ---
        # Logic n√†y ch·ªâ ƒë∆∞·ª£c g·ªçi sau khi ghi file th√†nh c√¥ng
        _handle_git_commit(
            logger=logger, 
            files_changed=files_changed_for_git, 
            scan_root=scan_root
        )