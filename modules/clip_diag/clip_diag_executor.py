# Path: modules/clip_diag/clip_diag_executor.py

"""
Execution logic for Clip Diagram utility (cdiag).
(Side-effects: Ghi file ngu·ªìn, Ch·∫°y tool, M·ªü file k·∫øt qu·∫£)
"""

import logging
import sys
from pathlib import Path
from typing import Optional, Dict, Any, List

from utils.core import run_command
from .clip_diag_config import (
    DOT_PATH, MMC_PATH, APP_CONFIG
)

__all__ = ["execute_diagram_generation"]

def _get_app_to_open(result_type: str) -> str:
    """
    L·∫•y t√™n ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh d·ª±a tr√™n lo·∫°i file mu·ªën m·ªü.
    S·ª≠ d·ª•ng c·∫•u h√¨nh t·ª´ `APP_CONFIG`.
    """
    if result_type == 'dot':
        return APP_CONFIG["dot_app"]
    elif result_type == 'mmd':
        return APP_CONFIG["mermaid_app"]
    elif result_type == 'svg':
        return APP_CONFIG["svg_viewer_app"]
    elif result_type == 'png':
        return APP_CONFIG["png_viewer_app"]
    return "Preview" # M·∫∑c ƒë·ªãnh tr√™n macOS

def execute_diagram_generation(
    logger: logging.Logger, 
    result: Dict[str, Any], 
    output_format: Optional[str]
) -> None:
    """
    Th·ª±c thi c√°c h√†nh ƒë·ªông d·ª±a tr√™n k·∫øt qu·∫£ t·ª´ Core.

    Lu·ªìng x·ª≠ l√Ω:
    1. Ghi file ngu·ªìn (n·∫øu ch∆∞a t·ªìn t·∫°i).
    2. N·∫øu `output_format` ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (Ch·∫ø ƒë·ªô ·∫¢nh):
        a. Ki·ªÉm tra file ·∫£nh ƒë√£ t·ªìn t·∫°i ch∆∞a.
        b. N·∫øu ch∆∞a, ch·∫°y `dot` ho·∫∑c `mmc` ƒë·ªÉ t·∫°o file ·∫£nh.
        c. M·ªü file ·∫£nh b·∫±ng ·ª©ng d·ª•ng t∆∞∆°ng ·ª©ng.
    3. N·∫øu `output_format` l√† None (Ch·∫ø ƒë·ªô Ngu·ªìn):
        a. M·ªü file ngu·ªìn (.dot ho·∫∑c .mmd) b·∫±ng ·ª©ng d·ª•ng t∆∞∆°ng ·ª©ng.

    Args:
        logger: Logger.
        result: Dict DiagramResult t·ª´ core.
        output_format: 'svg', 'png', ho·∫∑c None.
    """
    
    diagram_type: str = result["diagram_type"]
    source_path_abs: Path = result["source_path"] 
    file_prefix: str = result["file_prefix"]
    hashval: str = result["hash"]
    source_dir: Path = source_path_abs.parent 
    source_content: str = result["content"]
    
    # 1. ƒê·∫£m b·∫£o file ngu·ªìn t·ªìn t·∫°i (I/O Ghi)
    try:
        if not source_path_abs.exists():
            with open(source_path_abs, "w", encoding="utf-8") as f:
                f.write(source_content)
            logger.info(f"‚úçÔ∏è  Saved new source file: {source_path_abs.name}")
        else:
            logger.info(f"üîÑ Source file already exists: {source_path_abs.name}")
    except IOError as e:
        logger.error(f"‚ùå Failed to write source file {source_path_abs.name}: {e}")
        return # Kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu kh√¥ng ghi ƒë∆∞·ª£c file ngu·ªìn
    
    # --- 2. CH·∫æ ƒê·ªò ·∫¢NH (Image Mode) ---
    if output_format:
        output_ext = f".{output_format}"
        output_filename = f"{file_prefix}-{hashval}{output_ext}"
        output_path_abs = source_dir / output_filename
        app_to_open_output = _get_app_to_open(output_format)
        
        # 2a. Ki·ªÉm tra ·∫£nh ƒë√£ t·ªìn t·∫°i ch∆∞a
        if output_path_abs.exists():
            logger.info(f"üñºÔ∏è  Image file already exists: {output_filename}")
        else:
            # 2b. T·∫°o file ·∫£nh
            logger.info(f"‚è≥ Converting to {output_format.upper()}...")
            
            command: List[str] = []
            if diagram_type == 'graphviz':
                command = [
                    DOT_PATH, f"-T{output_format}", 
                    "-Gbgcolor=white", str(source_path_abs), "-o", str(output_path_abs)
                ]
            else: # diagram_type == 'mermaid'
                command = [
                    MMC_PATH, "-i", str(source_path_abs), "-o", str(output_path_abs)
                ]
            
            # Ch·∫°y l·ªánh chuy·ªÉn ƒë·ªïi
            try:
                success, error_msg = run_command(
                    command, 
                    logger, 
                    description=f"Convert {diagram_type} to {output_format.upper()}"
                )
                
                if not success:
                    logger.error("‚ùå Error converting diagram. Please check the source code syntax.")
                    logger.debug(f"Conversion command failed: {error_msg}")
                    # In th√™m g·ª£i √Ω n·∫øu l·ªói mermaid CLI
                    if diagram_type == 'mermaid' and MMC_PATH not in error_msg:
                         logger.error("   (Mermaid error? Check syntax or try online editor)")
                    elif diagram_type == 'graphviz' and DOT_PATH not in error_msg:
                         logger.error("   (Graphviz error? Check syntax with 'dot -v ...')")
                    return # D·ª´ng n·∫øu chuy·ªÉn ƒë·ªïi l·ªói
                
                logger.info(f"‚úÖ Image file created: {output_filename}")
                 
            except Exception as e:
                logger.error(f"‚ùå An unexpected error occurred during conversion: {e}")
                return # D·ª´ng n·∫øu c√≥ l·ªói kh√¥ng mong mu·ªën
        
        # 2c. M·ªü file ·∫£nh
        logger.info(f"üëÄ Opening image file with {app_to_open_output}...")
        open_command = ["open", "-a", app_to_open_output, str(output_path_abs)] 
        run_command(open_command, logger, description=f"Opening {output_filename}")
        
    # --- 3. CH·∫æ ƒê·ªò NGU·ªíN (Source Mode) ---
    else:
        source_ext = source_path_abs.suffix.strip('.') # L·∫•y 'dot' ho·∫∑c 'mmd'
        app_to_open_source = _get_app_to_open(source_ext)
        
        # M·ªü file ngu·ªìn
        logger.info(f"üë©‚Äçüíª Opening source file with {app_to_open_source}...")
        open_command = ["open", "-a", app_to_open_source, str(source_path_abs)] 
        run_command(open_command, logger, description=f"Opening {source_path_abs.name}")