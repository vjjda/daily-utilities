#!/usr/bin/env python3
# Path: modules/clip_diag/clip_diag_core.py

"""
Core logic for Clip Diagram utility (cdiag).
Handles reading clipboard, diagram type detection, content cleaning,
and file preparation.
"""

import hashlib
import re
import pyperclip
import logging
from pathlib import Path
from typing import Optional, Dict, Any, Tuple

# --- MODULE IMPORTS ---
from .clip_diag_config import (
    GRAPHVIZ_PREFIX, MERMAID_PREFIX, DEFAULT_OUTPUT_DIR
)
# ----------------------

# --- TYPING FOR RESULT ---
DiagramResult = Dict[str, Any]

# --- H√ÄM 1: NH·∫¨N DI·ªÜN LO·∫†I BI·ªÇU ƒê·ªí (Detect Diagram Type) ---

def _detect_diagram_type(content: str) -> Optional[str]:
    """Nh·∫≠n di·ªán lo·∫°i bi·ªÉu ƒë·ªì (graphviz ho·∫∑c mermaid)."""
    stripped_content = content.strip()
    lower_content = stripped_content.lower()

    # Logic Mermaid (Gi·ªØ nguy√™n t·ª´ file g·ªëc)
    unambiguous_mermaid = [
        'sequencediagram', 'gantt', 'classdiagram', 'statediagram',
        'pie', 'erdiagram', 'flowchart'
    ]
    if any(lower_content.startswith(kw) for kw in unambiguous_mermaid):
        return 'mermaid'

    if lower_content.startswith('graph '):
        first_line = lower_content.split('\n', 1)[0].strip()
        parts = first_line.split()
        if len(parts) > 1 and parts[1] in ['td', 'lr', 'bt', 'rl']:
            return 'mermaid'

    # Logic Graphviz (Gi·ªØ nguy√™n t·ª´ file g·ªëc)
    graphviz_pattern = re.compile(r'^\s*(strict\s+)?(graph|digraph)(\s+([a-zA-Z0-9_]+|"[^"]*"))?\s*\{', re.IGNORECASE)
    if graphviz_pattern.match(stripped_content):
        return 'graphviz'
        
    return None

# --- H√ÄM 2: L·ªåC B·ªé COMMENT (Remove Comments) ---

def _remove_comments(content: str, diagram_type: str) -> str:
    """L·ªçc b·ªè c√°c comment kh·ªèi m√£ ngu·ªìn Graphviz ho·∫∑c Mermaid."""
    if diagram_type == 'graphviz':
        # S·ª≠ d·ª•ng pattern ph·ª©c t·∫°p ƒë·ªÉ tr√°nh x√≥a chu·ªói b√™n trong ngo·∫∑c k√©p/ƒë∆°n
        pattern = re.compile(
            r'("(\\"|[^"])*")|(\'(\\\'|[^\'])*\')|(/\*[\s\S]*?\*/)|(#.*|//.*)',
            re.MULTILINE 
        )
        
        def replacer(match):
            # Gi·ªØ nguy√™n chu·ªói
            if match.group(1) is not None or match.group(3) is not None:
                return match.group(0) # Tr·∫£ v·ªÅ to√†n b·ªô match (g·ªìm c·∫£ d·∫•u ngo·∫∑c k√©p/ƒë∆°n)
            # X√≥a comment (nh√≥m 5 ho·∫∑c 6)
            return ""

        content = pattern.sub(replacer, content)

    elif diagram_type == 'mermaid':
        # Comment Mermaid lu√¥n b·∫Øt ƒë·∫ßu b·∫±ng %%
        content = re.sub(r'%%.*', '', content)
    
    # X√≥a c√°c d√≤ng tr·∫Øng th·ª´a ƒë∆∞·ª£c t·∫°o ra sau khi x√≥a comment
    cleaned_lines = [line for line in content.splitlines() if line.strip()]
    return '\n'.join(cleaned_lines)

# --- H√ÄM 3: L·ªåC B·ªé EMOJI (Filter Emoji) ---

def _filter_emoji(content: str, logger: logging.Logger) -> str:
    """L·ªçc b·ªè emoji kh·ªèi n·ªôi dung clipboard."""
    logger.info("üîç Filtering emoji...")
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F" "\U0001F300-\U0001F5FF" "\U0001F680-\U0001F6FF"
        "\U0001F700-\U0001F77F" "\U0001F780-\U0001F7FF" "\U0001F800-\U0001F8FF"
        "\U0001F900-\U0001F9FF" "\U0001FA00-\U0001FA6F" "\U0001FA70-\U0001FAFF"
        "\U00002702-\U000027B0" "\U000024C2-\U0001F251"
        "]+", flags=re.UNICODE
    )
    return emoji_pattern.sub(r'', content)

# --- H√ÄM ƒêI·ªÄU PH·ªêI CH√çNH (Orchestrator) ---

def process_clipboard_content(
    logger: logging.Logger, 
    filter_emoji: bool
) -> Optional[DiagramResult]:
    """
    X·ª≠ l√Ω to√†n b·ªô lu·ªìng l·∫•y, l√†m s·∫°ch v√† chu·∫©n b·ªã d·ªØ li·ªáu.
    """
    
    # 1. ƒê·ªçc Clipboard
    try:
        clipboard_content = pyperclip.paste()
        if not clipboard_content:
            logger.info("Clipboard is empty.")
            return None
    except Exception as e:
        logger.error(f"‚ùå Error reading clipboard: {e}")
        return None

    processed_content = clipboard_content
    
    # 2. L·ªçc Emoji (n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu)
    if filter_emoji:
        processed_content = _filter_emoji(processed_content, logger)

    if not processed_content.strip():
        logger.info("Content is empty after filtering.")
        return None

    # 3. Nh·∫≠n di·ªán lo·∫°i bi·ªÉu ƒë·ªì
    diagram_type = _detect_diagram_type(processed_content)
    if not diagram_type:
        logger.error("‚ùå Could not find valid Graphviz or Mermaid code in clipboard.")
        return None
    
    logger.info(f"‚ú® Detected diagram type: {diagram_type.capitalize()}")

    # 4. L·ªçc Comment (Lu√¥n lu√¥n)
    logger.info("üßπ Filtering comments...")
    processed_content = _remove_comments(processed_content, diagram_type)

    # Tho√°t n·∫øu n·ªôi dung r·ªóng sau khi l·ªçc
    if not processed_content.strip():
        logger.warning("Content is empty after comment filtering.")
        return None
        
    # 5. T·∫°o Hash v√† T√™n file
    # Hash ch·ªâ ƒë∆∞·ª£c t·∫°o sau khi n·ªôi dung ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch ho√†n to√†n
    hashval = hashlib.sha1(processed_content.encode("utf-8")).hexdigest()[:12]
    
    if diagram_type == 'graphviz':
        file_prefix = GRAPHVIZ_PREFIX
        source_ext = ".dot"
    elif diagram_type == 'mermaid':
        file_prefix = MERMAID_PREFIX
        source_ext = ".mmd"

    source_filename = f"{file_prefix}-{hashval}{source_ext}"
    source_path = DEFAULT_OUTPUT_DIR / source_filename
    
    # 6. T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a c√≥
    DEFAULT_OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    # 7. L∆∞u file ngu·ªìn (n·∫øu ch∆∞a t·ªìn t·∫°i)
    if not source_path.exists():
        with open(source_path, "w", encoding="utf-8") as f:
            f.write(processed_content)
        logger.info(f"‚úçÔ∏è  Saved new source file: {source_path.name}")
    else:
        logger.info(f"üîÑ Source file already exists: {source_path.name}")
    
    # 8. Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return {
        "diagram_type": diagram_type,
        "content": processed_content,
        "source_path": source_path,
        "hash": hashval,
        "file_prefix": file_prefix
    }