# Path: modules/clip_diag/clip_diag_core.py

"""
Core logic for Clip Diagram utility (cdiag).
Handles reading clipboard, diagram type detection, content cleaning,
and file preparation (pure logic).
"""

import hashlib
import re
import pyperclip
import logging
from pathlib import Path
from typing import Optional, Dict, Any, Tuple

from .clip_diag_config import (
    GRAPHVIZ_PREFIX, MERMAID_PREFIX, DEFAULT_OUTPUT_DIR
)

__all__ = ["process_clipboard_content"]


# Type hint cho ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
DiagramResult = Dict[str, Any]

def _detect_diagram_type(content: str) -> Optional[str]:
    """
    Nh·∫≠n di·ªán lo·∫°i bi·ªÉu ƒë·ªì (graphviz ho·∫∑c mermaid) t·ª´ n·ªôi dung.
    ∆Øu ti√™n Mermaid n·∫øu c√≥ s·ª± m∆° h·ªì (v√≠ d·ª•: 'graph LR').

    Args:
        content: N·ªôi dung ƒë√£ ƒë∆∞·ª£c trim kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi.

    Returns:
        'graphviz', 'mermaid', ho·∫∑c None n·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c.
    """
    stripped_content = content.strip()
    lower_content = stripped_content.lower()

    # Logic Mermaid
    unambiguous_mermaid = [
        'sequencediagram', 'gantt', 'classdiagram', 'statediagram',
        'pie', 'erdiagram', 'flowchart'
    ]
    if any(lower_content.startswith(kw) for kw in unambiguous_mermaid):
        return 'mermaid'

    # Tr∆∞·ªùng h·ª£p 'graph TD', 'graph LR', etc.
    if lower_content.startswith('graph '):
        first_line = lower_content.split('\n', 1)[0].strip()
        parts = first_line.split()
        if len(parts) > 1 and parts[1] in ['td', 'lr', 'bt', 'rl']:
            return 'mermaid'

    # Logic Graphviz
    graphviz_pattern = re.compile(
        r'^\s*(strict\s+)?(graph|digraph)(\s+([a-zA-Z0-9_]+|"[^"]*"))?\s*\{',
        re.IGNORECASE
    )
    if graphviz_pattern.match(stripped_content):
        return 'graphviz'
        
    return None

def _remove_comments(content: str, diagram_type: str) -> str:
    """
    L·ªçc b·ªè c√°c comment kh·ªèi m√£ ngu·ªìn Graphviz ho·∫∑c Mermaid.
    X√≥a c·∫£ c√°c d√≤ng tr·∫Øng th·ª´a t·∫°o ra sau khi x√≥a comment.

    Args:
        content: N·ªôi dung m√£ ngu·ªìn.
        diagram_type: 'graphviz' ho·∫∑c 'mermaid'.

    Returns:
        N·ªôi dung ƒë√£ l·ªçc comment.
    """
    cleaned_content = content
    if diagram_type == 'graphviz':
        # Pattern ph·ª©c t·∫°p ƒë·ªÉ tr√°nh x√≥a comment b√™n trong chu·ªói "" ho·∫∑c ''
        pattern = re.compile(
            r'("(\\"|[^"])*")|(\'(\\\'|[^\'])*\')|(/\*[\s\S]*?\*/)|(#.*|//.*)',
            re.MULTILINE 
        )
        def replacer(match):
            # Gi·ªØ nguy√™n chu·ªói n·∫øu match nh√≥m 1 ho·∫∑c 3
            if match.group(1) is not None or match.group(3) is not None:
                return match.group(0)
            # X√≥a comment (nh√≥m 5 ho·∫∑c 6)
            return ""
        cleaned_content = pattern.sub(replacer, content)

    elif diagram_type == 'mermaid':
        # Comment Mermaid lu√¥n b·∫Øt ƒë·∫ßu b·∫±ng %%
        cleaned_content = re.sub(r'%%.*', '', content)
    
    # X√≥a c√°c d√≤ng tr·∫Øng th·ª´a
    cleaned_lines = [line for line in cleaned_content.splitlines() if line.strip()]
    return '\n'.join(cleaned_lines)

def _filter_emoji(content: str, logger: logging.Logger) -> str:
    """L·ªçc b·ªè emoji kh·ªèi n·ªôi dung."""
    logger.info("üîç Filtering emoji...")
    # Pattern regex bao ph·ªß c√°c d·∫£i Unicode ch·ª©a emoji ph·ªï bi·∫øn
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"  # Emoticons
        "\U0001F300-\U0001F5FF"  # Symbols & Pictographs
        "\U0001F680-\U0001F6FF"  # Transport & Map Symbols
        "\U0001F700-\U0001F77F"  # Alchemical Symbols
        "\U0001F780-\U0001F7FF"  # Geometric Shapes Extended
        "\U0001F800-\U0001F8FF"  # Supplemental Arrows-C
        "\U0001F900-\U0001F9FF"  # Supplemental Symbols and Pictographs
        "\U0001FA00-\U0001FA6F"  # Chess Symbols
        "\U0001FA70-\U0001FAFF"  # Symbols and Pictographs Extended-A
        "\U00002702-\U000027B0"  # Dingbats
        "\U000024C2-\U0001F251"  # Enclosed Characters
        "]+", flags=re.UNICODE
    )
    return emoji_pattern.sub(r'', content)

def _trim_leading_comments_and_whitespace(content: str) -> str:
    """
    L·ªçc b·ªè c√°c d√≤ng comment (%%, /*, //, #) v√† d√≤ng tr·∫Øng
    ·ªü ƒê·∫¶U n·ªôi dung clipboard ƒë·ªÉ t√¨m ra d√≤ng code th·ª±c s·ª± ƒë·∫ßu ti√™n.
    ƒêi·ªÅu n√†y gi√∫p `_detect_diagram_type` ho·∫°t ƒë·ªông ch√≠nh x√°c h∆°n.

    Args:
        content: N·ªôi dung th√¥ t·ª´ clipboard (ƒë√£ chu·∫©n h√≥a non-breaking space).

    Returns:
        N·ªôi dung b·∫Øt ƒë·∫ßu t·ª´ d√≤ng code ƒë·∫ßu ti√™n, ho·∫∑c chu·ªói r·ªóng.
    """
    lines = content.splitlines()
    first_code_line_index = -1
    
    for i, line in enumerate(lines):
        stripped_line = line.strip()
        
        if not stripped_line: continue # B·ªè qua d√≤ng tr·∫Øng
        
        # B·ªè qua c√°c d√≤ng comment ph·ªï bi·∫øn
        if stripped_line.startswith(('%%', '/*', '//', '#')): continue
        
        # T√¨m th·∫•y d√≤ng code ƒë·∫ßu ti√™n
        first_code_line_index = i
        break
    
    if first_code_line_index == -1:
        # N·∫øu kh√¥ng t√¨m th·∫•y d√≤ng code n√†o
        return ""

    # Tr·∫£ v·ªÅ n·ªôi dung t·ª´ d√≤ng code ƒë·∫ßu ti√™n tr·ªü ƒëi
    return '\n'.join(lines[first_code_line_index:])


# --- H√ÄM ƒêI·ªÄU PH·ªêI CH√çNH (Orchestrator) ---

def process_clipboard_content(
    logger: logging.Logger, 
    filter_emoji: bool
) -> Optional[DiagramResult]:
    """
    X·ª≠ l√Ω to√†n b·ªô lu·ªìng l·∫•y, l√†m s·∫°ch v√† chu·∫©n b·ªã d·ªØ li·ªáu diagram.
    (Logic thu·∫ßn t√∫y, kh√¥ng ghi file)

    Lu·ªìng x·ª≠ l√Ω:
    1. ƒê·ªçc clipboard.
    2. Chu·∫©n h√≥a non-breaking spaces.
    3. L·ªçc emoji (n·∫øu c·ªù `filter_emoji`=True).
    4. Trim comment/whitespace ·ªü ƒë·∫ßu.
    5. Nh·∫≠n di·ªán lo·∫°i diagram.
    6. L·ªçc comment b√™n trong code.
    7. T·∫°o hash, t√™n file, ƒë∆∞·ªùng d·∫´n.
    8. ƒê·∫£m b·∫£o th∆∞ m·ª•c output t·ªìn t·∫°i.
    9. Tr·∫£ v·ªÅ DiagramResult object.

    Args:
        logger: Logger.
        filter_emoji: True n·∫øu c·∫ßn l·ªçc emoji.

    Returns:
        Dict DiagramResult n·∫øu th√†nh c√¥ng, None n·∫øu c√≥ l·ªói ho·∫∑c clipboard r·ªóng/kh√¥ng h·ª£p l·ªá.
        DiagramResult = {
            "diagram_type": str,
            "content": str,      # N·ªôi dung ƒë√£ l√†m s·∫°ch
            "source_path": Path, # ƒê∆∞·ªùng d·∫´n file ngu·ªìn d·ª± ki·∫øn
            "hash": str,         # Hash SHA1 c·ªßa content
            "file_prefix": str   # "graphviz" ho·∫∑c "mermaid"
        }
    """
    
    # 1. ƒê·ªçc Clipboard
    try:
        clipboard_content = pyperclip.paste()
        if not clipboard_content:
            logger.info("Clipboard is empty.")
            return None
    except Exception as e:
        logger.error(f"‚ùå Error reading clipboard: {e}")
        return None

    # 2. Chu·∫©n h√≥a Non-Breaking Spaces (U+00A0 -> U+0020)
    processed_content = clipboard_content.replace(u"\xa0", " ")
    
    # 3. L·ªçc Emoji (n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu)
    if filter_emoji:
        processed_content = _filter_emoji(processed_content, logger)

    # 4. L·ªçc comment/d√≤ng tr·∫Øng ·ªü ƒê·∫¶U v√†o
    logger.info("üßπ Trimming leading comments/whitespace...")
    processed_content = _trim_leading_comments_and_whitespace(processed_content)

    if not processed_content.strip():
        logger.info("Content is empty after filtering and trimming.")
        return None

    # 5. Nh·∫≠n di·ªán lo·∫°i bi·ªÉu ƒë·ªì
    diagram_type = _detect_diagram_type(processed_content)
    if not diagram_type:
        logger.error("‚ùå Could not find valid Graphviz or Mermaid code in clipboard.")
        return None
    
    logger.info(f"‚ú® Detected diagram type: {diagram_type.capitalize()}")

    # 6. L·ªçc Comment (b√™n trong code)
    logger.info("üßπ Filtering comments...")
    processed_content = _remove_comments(processed_content, diagram_type)

    if not processed_content.strip():
        logger.warning("Content is empty after comment filtering.")
        return None
        
    # 7. T·∫°o Hash v√† T√™n file
    # Hash ƒë∆∞·ª£c t·∫°o *sau khi* n·ªôi dung ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch ho√†n to√†n
    hashval = hashlib.sha1(processed_content.encode("utf-8")).hexdigest()[:12]
    
    if diagram_type == 'graphviz':
        file_prefix = GRAPHVIZ_PREFIX
        source_ext = ".dot"
    else: # diagram_type == 'mermaid'
        file_prefix = MERMAID_PREFIX
        source_ext = ".mmd"

    source_filename = f"{file_prefix}-{hashval}{source_ext}"
    source_path = DEFAULT_OUTPUT_DIR / source_filename
    
    # 8. ƒê·∫£m b·∫£o th∆∞ m·ª•c ƒë·∫ßu ra t·ªìn t·∫°i (kh√¥ng ph·∫£i l√† side-effect ch√≠nh)
    DEFAULT_OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    # 9. Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return {
        "diagram_type": diagram_type,
        "content": processed_content, # N·ªôi dung s·∫°ch ƒë·ªÉ Executor ghi file
        "source_path": source_path,
        "hash": hashval,
        "file_prefix": file_prefix
    }