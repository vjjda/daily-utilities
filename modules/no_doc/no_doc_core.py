# Path: modules/no_doc/no_doc_core.py
"""
Core Orchestration logic for the no_doc module.
"""

import logging
import argparse
from pathlib import Path
# S·ª¨A: Import OrderedDict
from typing import List, Optional, Dict, Any, Tuple, Set
from collections import OrderedDict
import sys

# Thi·∫øt l·∫≠p sys.path
if not 'PROJECT_ROOT' in locals():
    sys.path.append(str(Path(__file__).resolve().parent.parent.parent))

from .no_doc_loader import load_config_files
from .no_doc_merger import merge_ndoc_configs
from .no_doc_analyzer import analyze_file_content
from .no_doc_scanner import scan_files
from .no_doc_config import DEFAULT_EXTENSIONS
# S·ª¨A: Import h√†m in b√°o c√°o t·ª´ Executor
from .no_doc_executor import print_dry_run_report_for_group

__all__ = ["process_no_doc_logic"]

FileResult = Dict[str, Any] # Type alias

# S·ª¨A: Thay ƒë·ªïi ki·ªÉu tr·∫£ v·ªÅ c·ªßa h√†m
def process_no_doc_logic(
    logger: logging.Logger,
    files_to_process: List[Path],
    dirs_to_scan: List[Path],
    cli_args: argparse.Namespace,
    script_file_path: Path
) -> List[FileResult]:
    """
    ƒêi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh x√≥a docstring (Orchestrator).
    X·ª≠ l√Ω file v√† th∆∞ m·ª•c, in b√°o c√°o xen k·∫Ω.
    
    Returns:
        M·ªôt danh s√°ch ph·∫≥ng (flat list) ch·ª©a t·∫•t c·∫£ FileResult
        c·∫ßn ƒë∆∞·ª£c ghi b·ªüi Executor.
    """
    
    # S·ª¨A: D√πng danh s√°ch ph·∫≥ng
    all_results: List[FileResult] = []
    processed_files: Set[Path] = set() # Tr√°nh x·ª≠ l√Ω file tr√πng l·∫∑p

    # D√πng CWD ƒë·ªÉ in ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
    reporting_root = Path.cwd()

    all_clean: bool = getattr(cli_args, 'all_clean', False)
    if all_clean:
        logger.info("‚ö†Ô∏è Ch·∫ø ƒë·ªô ALL-CLEAN ƒë√£ b·∫≠t: S·∫Ω lo·∫°i b·ªè c·∫£ Docstring V√Ä Comments (n·∫øu cleaner h·ªó tr·ª£).")

    # --- 1. X·ª¨ L√ù C√ÅC FILE RI√äNG L·∫∫ ---
    cli_extensions_str: Optional[str] = getattr(cli_args, 'extensions', None)
    default_file_config = merge_ndoc_configs(
        logger=logger,
        cli_extensions=cli_extensions_str,
        cli_ignore=None, 
        file_config_data={} 
    )
    file_extensions = set(default_file_config["final_extensions_list"])

    if files_to_process:
        # S·ª¨A: Th√™m emoji üìÑ
        logger.info(f"--- üìÑ ƒêang x·ª≠ l√Ω {len(files_to_process)} file ri√™ng l·∫ª ---")
        logger.info(f"  [C·∫•u h√¨nh √°p d·ª•ng]")
        logger.info(f"    - Extensions: {sorted(list(file_extensions))}")
        logger.info(f"    - (B·ªè qua .gitignore v√† config file)")
        
        file_only_results: List[FileResult] = []
        for file_path in files_to_process:
            resolved_file = file_path.resolve()
            if resolved_file in processed_files:
                continue
                
            file_ext = "".join(file_path.suffixes).lstrip('.')
            if file_ext not in file_extensions:
                logger.warning(f"‚ö†Ô∏è B·ªè qua file '{file_path.name}': kh√¥ng kh·ªõp extensions (.{file_ext})")
                continue

            result = analyze_file_content(file_path, logger, all_clean)
            if result:
                file_only_results.append(result)
            processed_files.add(resolved_file)
            
        if file_only_results:
            print_dry_run_report_for_group(logger, "Files L·∫ª", file_only_results, reporting_root)
            all_results.extend(file_only_results)
        
        # S·ª¨A: Th√™m d√≤ng tr·ªëng sau khi x·ª≠ l√Ω xong nh√≥m file l·∫ª
        logger.info("") 

    # --- 2. X·ª¨ L√ù C√ÅC TH∆Ø M·ª§C ---
    if dirs_to_scan:
        logger.info(f"ƒêang x·ª≠ l√Ω {len(dirs_to_scan)} th∆∞ m·ª•c...")

    for scan_dir in dirs_to_scan:
        # 2a. T·∫£i config
        file_config_data = load_config_files(scan_dir, logger)

        # 2b. H·ª£p nh·∫•t config
        cli_extensions: Optional[str] = getattr(cli_args, 'extensions', None)
        cli_ignore: Optional[str] = getattr(cli_args, 'ignore', None)
        
        merged_config = merge_ndoc_configs(
            logger=logger,
            cli_extensions=cli_extensions,
            cli_ignore=cli_ignore,
            file_config_data=file_config_data
        )
        final_extensions_list = merged_config["final_extensions_list"]
        final_ignore_list = merged_config["final_ignore_list"]

        # 2c. Qu√©t file
        files_in_dir, scan_status = scan_files(
             logger=logger,
             start_path=scan_dir, 
             ignore_list=final_ignore_list,
             extensions=final_extensions_list,
             scan_root=scan_dir, 
             script_file_path=script_file_path
        )
        
        # S·ª¨A: Th√™m emoji üìÅ
        logger.info(f"--- üìÅ Qu√©t th∆∞ m·ª•c: {scan_dir.name} ---")
        logger.info(f"  [C·∫•u h√¨nh √°p d·ª•ng]")
        logger.info(f"    - Extensions: {sorted(list(final_extensions_list))}")
        logger.info(f"    - Ignore (t·ª´ config/CLI): {final_ignore_list}")
        logger.info(f"    - T·∫£i .gitignore c·ª•c b·ªô: {'C√≥' if scan_status['gitignore_found'] else 'Kh√¥ng'}")
        logger.info(f"    - T·∫£i .gitmodules c·ª•c b·ªô: {'C√≥' if scan_status['gitmodules_found'] else 'Kh√¥ng'}")

        if not files_in_dir:
            # S·ª¨A: Th√™m emoji ü§∑
            logger.info(f"  -> ü§∑ Kh√¥ng t√¨m th·∫•y file n√†o kh·ªõp ti√™u ch√≠ trong: {scan_dir.name}")
            # S·ª¨A: Th√™m emoji ‚úÖ v√† d√≤ng tr·ªëng
            logger.info(f"--- ‚úÖ K·∫øt th√∫c {scan_dir.name} ---")
            logger.info("") # Th√™m d√≤ng tr·ªëng
            continue

        # S·ª¨A: Th√™m emoji ‚ö°
        logger.info(f"  -> ‚ö° T√¨m th·∫•y {len(files_in_dir)} file, ƒëang ph√¢n t√≠ch...")

        # 2d. Ph√¢n t√≠ch file
        dir_results: List[FileResult] = []
        for file_path in files_in_dir:
            resolved_file = file_path.resolve()
            if resolved_file in processed_files:
                continue 

            result = analyze_file_content(file_path, logger, all_clean)
            if result:
                dir_results.append(result)
            processed_files.add(resolved_file)
            
        if dir_results:
            print_dry_run_report_for_group(logger, scan_dir.name, dir_results, reporting_root)
            all_results.extend(dir_results)
            
        # S·ª¨A: Th√™m emoji ‚úÖ v√† d√≤ng tr·ªëng
        logger.info(f"--- ‚úÖ K·∫øt th√∫c {scan_dir.name} ---")
        logger.info("") # Th√™m d√≤ng tr·ªëng

    if not all_results and (files_to_process or dirs_to_scan):
        logger.info("Qu√©t ho√†n t·∫•t. Kh√¥ng t√¨m th·∫•y file n√†o c·∫ßn thay ƒë·ªïi.")
        
    return all_results