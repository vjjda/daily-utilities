[pcode]

# Danh sách các đuôi file cần LÀM SẠCH (clean) khi dùng -a/--all-clean.
# GHI ĐÈ hoàn toàn danh sách mặc định (thường là ["py"]).
# Bị ghi đè/sửa đổi bởi cờ CLI -x/--clean-extensions.
# Ví dụ: clean_extensions = ["py", "js"]
clean_extensions = ["py", "sh", "zsh"]

# Danh sách các đuôi file (extensions) cần bao gồm.
# Bất kỳ giá trị nào ở đây sẽ GHI ĐÈ hoàn toàn danh sách mặc định.
# (CLI: -e "py,md" / +e "ts" / ~e "log")
extensions = ["bash", "cfg", "cfg.py", "gitignore", "ini", "json", "md", "py", "pyi", "sh", "template", "toml", "txt", "xml", "yaml", "yml", "zsh", ""]

# Danh sách các đuôi file cần FORMAT khi dùng -f/--format.
# GHI ĐÈ hoàn toàn danh sách mặc định (thường là ["py"]).
# (Hiện chưa có cờ CLI để sửa đổi danh sách này)
# Ví dụ: format_extensions = ["py"]
format_extensions = ["py"]

# Danh sách các pattern (kiểu .gitignore) để bỏ qua.
# Các giá trị này sẽ được THÊM vào danh sách mặc định.
# (CLI: -I "*.log,build/")
ignore = [".DS_Store", ".git", ".hg", ".svn", ".venv", "__pycache__", "venv"]

include = []

# Đường dẫn thư mục mặc định để lưu file context.
# Hỗ trợ `~` (ví dụ: "~/Documents/code_contexts")
output_dir = "~/Documents/code.context"

[tree]

# dirs-only (Union[str, List[str], None]): Chế độ chỉ hiển thị thư mục.
# - "_ALL_": Chỉ hiển thị thư mục cho toàn bộ cây (tương đương cờ -d).
# - ["pattern1", "pattern2/"]: Chỉ hiển thị thư mục con BÊN TRONG các thư mục khớp pattern.
# Các pattern này sẽ được GỘP VÀO danh sách mặc định (thường là rỗng).
# Ví dụ 1: dirs-only = "_ALL_"
# Ví dụ 2: dirs-only = ["assets", "static/"]
# Mặc định: {toml_dirs_only}
dirs-only = []

# extensions (Optional[List[str]]): Chỉ hiển thị các file có đuôi trong danh sách này.
# Ghi đè hoàn toàn danh sách mặc định (là None - hiển thị tất cả).
# Để chỉ hiển thị file Python và Markdown: extensions = ["py", "md"]
# Mặc định: (Không lọc - {toml_extensions} là None)
# extensions = 

# ignore (List[str]): Danh sách các pattern (giống .gitignore) để ẩn hoàn toàn khỏi cây.
# Các pattern này sẽ được NỐI VÀO danh sách mặc định của script.
# Ví dụ: ignore = ["*.tmp", ".env"]
# Mặc định (được thêm vào): {toml_ignore}
ignore = [".git", ".venv", "__pycache__", "node_modules", "venv"]

# level (Optional[int]): Giới hạn độ sâu hiển thị của cây.
# Bỏ comment và đặt giá trị số nguyên dương, ví dụ: level = 3
# Mặc định: không giới hạn (None)
# level = 

# prune (List[str]): Danh sách các pattern thư mục để "cắt tỉa".
# Thư mục sẽ hiển thị nhưng nội dung bên trong bị ẩn ([...]).
# Các pattern này sẽ được NỐI VÀO danh sách mặc định của script.
# Ví dụ: prune = ["node_modules/", "vendor/"]
# Mặc định (được thêm vào): {toml_prune}
prune = ["build", "dist"]

# show-submodules (bool): Hiển thị nội dung của Git submodules.
# Mặc định: false (ẩn submodules)
show-submodules = false

# use-gitignore (bool): Có tôn trọng file .gitignore hay không.
# Cờ --no-gitignore trên CLI sẽ ghi đè giá trị này thành false.
# Mặc định: true (luôn tôn trọng nếu là kho Git)
use-gitignore = false

[ndoc]

# extensions (List[str]): Danh sách các đuôi file cần bao gồm.
# GHI ĐÈ hoàn toàn danh sách mặc định CỦA SCRIPT.
# Ví dụ: extensions = ["py", "pycst"]
# Mặc định (từ config set): {toml_extensions} # Placeholder vẫn là list
extensions = ["py", ""]

# (Tùy chọn) Danh sách các đuôi file cần FORMAT khi dùng -f/--format.
# GHI ĐÈ hoàn toàn danh sách mặc định (thường là ["py"]).
# (Hiện chưa có cờ CLI để sửa đổi danh sách này)
# Ví dụ: format_extensions = ["py"]
format_extensions = ["py"]

# ignore (List[str]): Danh sách các pattern (kiểu .gitignore) để bỏ qua.
# Các giá trị này sẽ được THÊM vào danh sách mặc định.
# Ví dụ: ignore = ["**/tests/*"] # Placeholder vẫn là list
ignore = [".DS_Store", ".git", "/.gitignore", ".hg", ".svn", ".venv", "__pycache__", "build", "dist", "node_modules", "out", "venv"]

[cpath]

# extensions (List[str]): Danh sách các đuôi file cần quét.
# Ghi đè hoàn toàn danh sách mặc định của script.
# Ví dụ: extensions = ["py", "js", "ts", "md"]
# Mặc định: {toml_extensions}
extensions = ["css", "js", "py", "pyi", "scss", "sh", "template.toml", "ts", "zsh", ""]

# ignore (List[str]): Danh sách các pattern (giống .gitignore) để bỏ qua.
# Các pattern này sẽ được NỐI VÀO danh sách mặc định của script.
# Ví dụ: ignore = ["*.log", "temp/", "build*/"]
# Mặc định (được thêm vào): {toml_ignore}
ignore = [".git", ".venv", "__pycache__", "build", "dist", "node_modules", "out", "venv"]

[sgen]

# ast_all_list_name (str): Tên biến list __all__ trong AST của submodule.
ast_all_list_name = "__all__"

# ast_module_list_name (str): Tên biến list chứa danh sách submodule trong AST.
ast_module_list_name = "modules_to_export"

# --- Cấu hình nâng cao (Ít khi cần thay đổi) ---

# dynamic_import_indicators (List[str]): Các chuỗi code nhận diện gateway động.
dynamic_import_indicators = ["globals()[name]", "globals().update"]

# ignore (List[str]): Các pattern (giống .gitignore) để bỏ qua khi quét.
# Các pattern này sẽ được NỐI VÀO danh sách mặc định của script.
# Ví dụ: ignore = ["*_test.py", "**/legacy/*"]
# Mặc định (được thêm vào): {toml_ignore}
ignore = ["*.pyc", "*.pyo", ".git", ".venv", "__pycache__", "build", "dist", "node_modules", "out", "venv"]

# include (List[str]): Bộ lọc dương. Chỉ xử lý các file khớp với pattern này.
# Hoạt động sau khi đã áp dụng 'restrict' và 'ignore'.
# Các pattern này sẽ được NỐI VÀO danh sách mặc định (thường là rỗng).
# Ví dụ: include = ["modules/core/**", "utils/network.py"]
# Mặc định (được thêm vào): {toml_include}
include = []
