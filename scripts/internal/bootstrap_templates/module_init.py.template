#!/usr/bin/env python3
# Path: modules/{module_name}/__init__.py

"""
Module Gateway (Facade) for {module_name}.
(Auto-generated by bootstrap_tool.py)
"""

from pathlib import Path
from importlib import import_module
from typing import List

# --- Dynamic Re-export ---
current_dir = Path(__file__).parent

# Define the explicit order of internal modules to load
modules_to_export: List[str] = [
    "{module_name}_config",
    "{module_name}_loader",
    "{module_name}_core",
    "{module_name}_executor"
]

# (This list is for Mypy/linters, but the main logic is globals())
__all__: List[str] = []

for submodule_stem in modules_to_export:
    try:
        # 1. Import the module object
        # Dùng {{submodule_stem}} để escape khỏi template processor.
        module = import_module(f".{{submodule_stem}}", package=__name__)
        
        # 2. Check if __all__ is defined and add its contents
        if hasattr(module, '__all__'):
            public_symbols = getattr(module, '__all__')
            for name in public_symbols:
                # Get the actual function/class/constant
                obj = getattr(module, name)
                # Add it to the namespace of this __init__.py
                globals()[name] = obj
            
            # Add to __all__ for linters
            __all__.extend(public_symbols)
        
    except ImportError as e:
        # Handle cases where a submodule might fail to import
        # Dùng {{submodule_stem}} và {{e}} để escape.
        print(f"Warning: Could not import symbols from {{submodule_stem}}: {{e}}")

# Clean up temporary variables
del Path, import_module, List, current_dir, modules_to_export, submodule_stem
if 'module' in locals():
    del module
if 'public_symbols' in locals():
    del public_symbols
if 'name' in locals():
    del name
if 'obj' in locals():
    del obj