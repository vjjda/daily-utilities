# Path: scripts/internal/bootstrap_tool.py

"""
Script n·ªôi b·ªô ƒë·ªÉ bootstrap (kh·ªüi t·∫°o) m·ªôt tool utility m·ªõi.
(ƒê√£ refactor ƒë·ªÉ d√πng module gateway 'bootstrap')
"""

import sys
import argparse
import logging
import os
from pathlib import Path
from typing import Dict, Any, List, Optional

# --- (tomllib import gi·ªØ nguy√™n) ---
try:
    import tomllib
except ImportError:
    try:
        import toml as tomllib
    except ImportError:
        print("L·ªói: C·∫ßn g√≥i 'toml'. Ch·∫°y 'pip install toml' (cho Python < 3.11)", file=sys.stderr)
        sys.exit(1)

# --- (sys.path import gi·ªØ nguy√™n) ---
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(PROJECT_ROOT))

try:
    from utils.logging_config import setup_logging, log_success # type: ignore[reportUnknownVariableType]
    
    # --- (Import gateway gi·ªØ nguy√™n) ---
    from scripts.internal.bootstrap import (
        generate_bin_wrapper,
        generate_script_entrypoint,
        generate_module_file,
        generate_doc_file,
        generate_module_init_file
    )
except ImportError as e:
    print(f"L·ªói: Kh√¥ng th·ªÉ import utils ho·∫∑c bootstrap gateway: {e}", file=sys.stderr)
    sys.exit(1)

# --- (ƒê·ªãnh nghƒ©a th∆∞ m·ª•c gi·ªØ nguy√™n) ---
BIN_DIR = PROJECT_ROOT / "bin"
SCRIPTS_DIR = PROJECT_ROOT / "scripts"
MODULES_DIR = PROJECT_ROOT / "modules"
DOCS_DIR = PROJECT_ROOT / "docs"

# --- H√ÄM MAIN (ƒêI·ªÄU PH·ªêI) ---
def main():
    """H√†m ch√≠nh ch·∫°y script bootstrap"""
    
    logger = setup_logging(script_name="Bootstrap", console_level_str="INFO")
    logger.debug("Bootstrap script started.")

    # --- (1. Ph√¢n t√≠ch ƒë·ªëi s·ªë gi·ªØ nguy√™n) ---
    parser = argparse.ArgumentParser(description="Bootstrap (kh·ªüi t·∫°o) m·ªôt tool utility m·ªõi t·ª´ file *.spec.toml.")
    parser.add_argument(
        "target_path_str", 
        type=str, 
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c module M·ªöI (modules/new) HO·∫∂C file .spec.toml (modules/new/new.spec.toml)."
    )
    args = parser.parse_args()

    # --- (2. Load v√† x√°c th·ª±c ƒë∆∞·ªùng d·∫´n gi·ªØ nguy√™n) ---
    target_path = Path(args.target_path_str).resolve()
    module_path: Optional[Path] = None
    spec_file_path: Optional[Path] = None

    if target_path.is_dir():
        module_path = target_path
        try:
            spec_file_path = next(module_path.glob("*.spec.toml"))
            logger.debug(f"Ph√°t hi·ªán mode th∆∞ m·ª•c. ƒê√£ t√¨m th·∫•y file spec: {spec_file_path.name}")
        except StopIteration:
            logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file *.spec.toml n√†o trong th∆∞ m·ª•c:")
            logger.error(f"   {module_path.as_posix()}")
            sys.exit(1)
            
    elif target_path.is_file():
        if target_path.name.endswith(".spec.toml"):
            module_path = target_path.parent
            spec_file_path = target_path
            logger.debug(f"Ph√°t hi·ªán mode file. S·ª≠ d·ª•ng file spec: {spec_file_path.name}")
        else:
            logger.error("‚ùå L·ªói: B·∫°n ƒë√£ cung c·∫•p m·ªôt file, nh∆∞ng n√≥ kh√¥ng ph·∫£i l√† file *.spec.toml.")
            sys.exit(1)
            
    else:
        module_path = target_path
        spec_file_path = module_path / "tool.spec.toml" # M·∫∑c ƒë·ªãnh cho tool m·ªõi
        logger.warning(f"ƒê∆∞·ªùng d·∫´n '{module_path.name}' kh√¥ng t·ªìn t·∫°i. Gi·∫£ ƒë·ªãnh ƒë√¢y l√† module m·ªõi.")

    # ... (log info gi·ªØ nguy√™n) ...
    logger.info(f"üöÄ B·∫Øt ƒë·∫ßu bootstrap:")
    logger.info(f"   Th∆∞ m·ª•c Module: {module_path.relative_to(PROJECT_ROOT).as_posix()}")
    logger.info(f"   File Spec:      {spec_file_path.name}")

    if not module_path.is_dir():
        logger.warning(f"Th∆∞ m·ª•c module '{module_path.name}' ch∆∞a t·ªìn t·∫°i. ƒêang t·∫°o...")
        module_path.mkdir(parents=True, exist_ok=True)
    
    if not spec_file_path.exists():
        logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file spec: {spec_file_path.name}")
        # ... (log error gi·ªØ nguy√™n) ...
        sys.exit(1)

    # --- (3. Load TOML gi·ªØ nguy√™n) ---
    try:
        with open(spec_file_path, 'rb') as f:
            config = tomllib.load(f) # type: ignore[reportArgumentType]
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ƒë·ªçc file TOML: {e}")
        sys.exit(1)

    # --- 4. X√°c th·ª±c config v√† chu·∫©n b·ªã d·ªØ li·ªáu (ƒê√£ Ho√†n t√°c) ---
    try:
        config['module_name'] = module_path.name # (v√≠ d·ª•: 'c_demo')
        
        # --- (ƒê√£ x√≥a logic t·∫°o 'python_module_name') ---
        
        tool_name = config['meta']['tool_name']
        script_file = config['meta']['script_file']
        
        logger.debug(f"Tool Name: {tool_name}")
        logger.debug(f"Module Name: {config['module_name']}")
        
    except KeyError as e:
        logger.error(f"‚ùå File spec '{spec_file_path.name}' thi·∫øu key b·∫Øt bu·ªôc trong [meta]: {e}")
        sys.exit(1)
        
    # --- 5. T·∫°o n·ªôi dung (g·ªçi generator) (ƒê√£ Ho√†n t√°c) ---
    try:
        # (L·∫•y t√™n module g·ªëc)
        mod_name = config['module_name']
        
        generated_content = {
            "bin": generate_bin_wrapper(config),
            "script": generate_script_entrypoint(config),
            "config": generate_module_file(config, "config"),
            "loader": generate_module_file(config, "loader"), 
            "core": generate_module_file(config, "core"),
            "executor": generate_module_file(config, "executor"),
            "init": generate_module_init_file(config), 
        }
        
        # --- MODIFIED: Ho√†n t√°c, d√πng 'mod_name' ---
        target_paths = {
            "bin": BIN_DIR / tool_name,
            "script": SCRIPTS_DIR / script_file,
            "config": module_path / f"{mod_name}_config.py",
            "loader": module_path / f"{mod_name}_loader.py", 
            "core": module_path / f"{mod_name}_core.py",
            "executor": module_path / f"{mod_name}_executor.py",
            "init": module_path / "__init__.py", 
        }
        # --- END MODIFIED ---
        
        if config.get('docs', {}).get('enabled', False):
            generated_content["docs"] = generate_doc_file(config)
            target_paths["docs"] = DOCS_DIR / "tools" / f"{tool_name}.md"

    except Exception as e:
        logger.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫°o n·ªôi dung code: {e}")
        logger.debug("Traceback:", exc_info=True)
        sys.exit(1)

    # --- (6. KI·ªÇM TRA AN TO√ÄN gi·ªØ nguy√™n) ---
    existing_files = [p for p in target_paths.values() if p.exists()]
    if existing_files:
        logger.error(f"‚ùå D·ª´ng l·∫°i! C√°c file sau ƒë√£ t·ªìn t·∫°i. S·∫Ω kh√¥ng ghi ƒë√®:")
        for p in existing_files:
            logger.error(f"   -> {p.relative_to(PROJECT_ROOT).as_posix()}")
        sys.exit(1)

    # --- (7. GHI FILE (I/O) gi·ªØ nguy√™n) ---
    try:
        for key, path in target_paths.items():
            content = generated_content[key]
            path.parent.mkdir(parents=True, exist_ok=True) 
            path.write_text(content, encoding='utf-8')
            
            relative_path = path.relative_to(PROJECT_ROOT).as_posix()
            log_success(logger, f"ƒê√£ t·∫°o: {relative_path}")

            if key == "bin":
                os.chmod(path, 0o755) # C·∫•p quy·ªÅn th·ª±c thi
                logger.info(f"   -> ƒê√£ c·∫•p quy·ªÅn executable (chmod +x)")
            
    except IOError as e:
        logger.error(f"‚ùå L·ªói I/O khi ghi file: {e}")
        sys.exit(1)
        
    logger.info("\n‚ú® Bootstrap ho√†n t·∫•t! C·∫•u tr√∫c file cho tool m·ªõi ƒë√£ s·∫µn s√†ng.")

if __name__ == "__main__":
    main()