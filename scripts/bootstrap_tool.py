#!/usr/bin/env python3
# Path: scripts/bootstrap_tool.py

"""
Script n·ªôi b·ªô ƒë·ªÉ bootstrap (kh·ªüi t·∫°o) m·ªôt tool utility m·ªõi.
S·ª≠ d·ª•ng c·∫•u tr√∫c module `bootstrap` ƒë√£ ƒë∆∞·ª£c refactor theo SRP.
"""

import sys
import argparse
import logging
import os
from pathlib import Path
from typing import Dict, Any, List, Optional, Final

# Thi·∫øt l·∫≠p sys.path ƒë·ªÉ import c√°c module c·ªßa d·ª± √°n
PROJECT_ROOT: Final[Path] = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))

try:
    from utils.logging_config import setup_logging, log_success

    # Import c√°c th√†nh ph·∫ßn SRP t·ª´ module 'bootstrap'
    from modules.bootstrap import (
        # H·∫±ng s·ªë c·∫•u h√¨nh
        DEFAULT_BIN_DIR_NAME,
        DEFAULT_SCRIPTS_DIR_NAME,
        DEFAULT_MODULES_DIR_NAME,
        DEFAULT_DOCS_DIR_NAME,
        # C√°c h√†m ch·ª©c nƒÉng
        load_bootstrap_config, # Loader
        load_spec_file,        # Loader
        process_bootstrap_logic, # Core
        execute_bootstrap_action # Executor
    )
except ImportError as e:
    print(f"L·ªói: Kh√¥ng th·ªÉ import utils ho·∫∑c gateway bootstrap: {e}", file=sys.stderr) #
    sys.exit(1)

def main():
    """H√†m ch√≠nh ch·∫°y script bootstrap."""

    logger = setup_logging(script_name="Bootstrap", console_level_str="INFO")
    logger.debug("Script bootstrap b·∫Øt ƒë·∫ßu.") #

    # --- Ph√¢n t√≠ch ƒë·ªëi s·ªë d√≤ng l·ªánh ---
    parser = argparse.ArgumentParser(description="Bootstrap (kh·ªüi t·∫°o) m·ªôt tool utility m·ªõi t·ª´ file *.spec.toml.") #
    parser.add_argument(
        "spec_file_path_str",
        type=str,
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file *.spec.toml (v√≠ d·ª•: docs/drafts/new_tool.spec.toml)." #
    )
    parser.add_argument(
        "-f", "--force",
        action="store_true",
        help="Ghi ƒë√® (overwrite) c√°c file v√† th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i n·∫øu c√≥." #
    )
    args = parser.parse_args()

    try:
        # --- 1. LOAD (ƒê·ªçc Config v√† Spec) ---

        # 1.1. T·∫£i c·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n d·ª± √°n t·ª´ .project.toml
        toml_config = load_bootstrap_config(logger, PROJECT_ROOT)

        bin_dir_name = toml_config.get("bin_dir", DEFAULT_BIN_DIR_NAME)
        scripts_dir_name = toml_config.get("scripts_dir", DEFAULT_SCRIPTS_DIR_NAME)
        modules_dir_name = toml_config.get("modules_dir", DEFAULT_MODULES_DIR_NAME)
        docs_dir_name = toml_config.get("docs_dir", DEFAULT_DOCS_DIR_NAME)

        # X√¢y d·ª±ng c√°c ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
        configured_paths = {
            "BIN_DIR": PROJECT_ROOT / bin_dir_name,
            "SCRIPTS_DIR": PROJECT_ROOT / scripts_dir_name,
            "MODULES_DIR": PROJECT_ROOT / modules_dir_name,
            "DOCS_DIR": PROJECT_ROOT / docs_dir_name
        }
        logger.debug(f"ƒê√£ t·∫£i c√°c ƒë∆∞·ªùng d·∫´n c·∫•u h√¨nh: {configured_paths}") #

        # 1.2. T·∫£i file spec t·ª´ ƒë·ªëi s·ªë CLI
        spec_file_path = Path(args.spec_file_path_str).resolve()
        if not spec_file_path.is_file() or not spec_file_path.name.endswith(".spec.toml"):
            logger.error(f"‚ùå L·ªói: ƒê∆∞·ªùng d·∫´n cung c·∫•p kh√¥ng ph·∫£i l√† file *.spec.toml h·ª£p l·ªá.") #
            logger.error(f"   ƒê√£ nh·∫≠n: {spec_file_path.as_posix()}") #
            sys.exit(1)

        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu bootstrap:") #
        try:
            # Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi n·∫øu c√≥ th·ªÉ
            spec_rel_path = spec_file_path.relative_to(PROJECT_ROOT).as_posix()
        except ValueError:
            spec_rel_path = spec_file_path.as_posix()
        logger.info(f"   File Spec: {spec_rel_path}") #

        config_spec = load_spec_file(logger, spec_file_path)

        # --- 2. CORE (X·ª≠ l√Ω logic, t·∫°o n·ªôi dung) ---
        (
            generated_content, # Dict[str, str]
            target_paths,      # Dict[str, Path]
            module_path        # Path
        ) = process_bootstrap_logic(
            logger=logger,
            config=config_spec,
            configured_paths=configured_paths
        )

        logger.info(f"   Th∆∞ m·ª•c Module: {module_path.relative_to(PROJECT_ROOT).as_posix()}") #

        # --- 3. EXECUTOR (Ghi file, ki·ªÉm tra an to√†n) ---
        execute_bootstrap_action(
            logger=logger,
            generated_content=generated_content,
            target_paths=target_paths,
            module_path=module_path,
            project_root=PROJECT_ROOT,
            force=args.force # Truy·ªÅn c·ªù force
        )

        log_success(logger, "\n‚ú® Bootstrap ho√†n t·∫•t! C·∫•u tr√∫c file cho tool m·ªõi ƒë√£ s·∫µn s√†ng.") #

    except SystemExit: # B·∫Øt l·ªói SystemExit t·ª´ c√°c module con
        # L·ªói ƒë√£ ƒë∆∞·ª£c log, ch·ªâ c·∫ßn tho√°t
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh bootstrap: {e}") #
        logger.debug("Traceback:", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()