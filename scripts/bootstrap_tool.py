# Path: scripts/bootstrap_tool.py

"""
Script n·ªôi b·ªô ƒë·ªÉ bootstrap (kh·ªüi t·∫°o) m·ªôt tool utility m·ªõi.
(ƒê√£ refactor ƒë·ªÉ d√πng module gateway 'bootstrap')
"""

import sys
import argparse
import logging
import os
from pathlib import Path
from typing import Dict, Any, List, Optional

# --- (tomllib import gi·ªØ nguy√™n) ---
try:
    import tomllib
except ImportError:
    try:
        import toml as tomllib
    except ImportError:
        print("L·ªói: C·∫ßn g√≥i 'toml'. Ch·∫°y 'pip install toml' (cho Python < 3.11)", file=sys.stderr)
        sys.exit(1)

# --- MODIFIED: C·∫≠p nh·∫≠t PROJECT_ROOT v√† sys.path ---
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))
# --- END MODIFIED ---

try:
    from utils.logging_config import setup_logging, log_success # type: ignore[reportUnknownVariableType]
    
    # --- MODIFIED: Import t·ª´ 'modules.bootstrap' ---
    from utils.core import load_project_config_section # type: ignore[reportUnknownVariableType]
    
    from modules.bootstrap import (
        generate_bin_wrapper,
        generate_script_entrypoint,
        generate_module_file,
        generate_doc_file,
        generate_module_init_file,
        
        # Import c√°c h·∫±ng s·ªë config m·ªõi
        CONFIG_SECTION_NAME,
        DEFAULT_BIN_DIR_NAME,
        DEFAULT_SCRIPTS_DIR_NAME,
        DEFAULT_MODULES_DIR_NAME,
        DEFAULT_DOCS_DIR_NAME
    )
    # --- END MODIFIED ---
except ImportError as e:
    print(f"L·ªói: Kh√¥ng th·ªÉ import utils ho·∫∑c bootstrap gateway: {e}", file=sys.stderr)
    sys.exit(1)

# --- (H√†m main gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi logic b√™n trong) ---
def main():
    """H√†m ch√≠nh ch·∫°y script bootstrap"""
    
    logger = setup_logging(script_name="Bootstrap", console_level_str="INFO")
    logger.debug("Bootstrap script started.")
    
    # --- (Load Configurable Paths gi·ªØ nguy√™n) ---
    config_path = PROJECT_ROOT / ".project.toml"
    toml_config = load_project_config_section(config_path, CONFIG_SECTION_NAME, logger)
    
    bin_dir_name = toml_config.get("bin_dir", DEFAULT_BIN_DIR_NAME)
    scripts_dir_name = toml_config.get("scripts_dir", DEFAULT_SCRIPTS_DIR_NAME)
    modules_dir_name = toml_config.get("modules_dir", DEFAULT_MODULES_DIR_NAME)
    docs_dir_name = toml_config.get("docs_dir", DEFAULT_DOCS_DIR_NAME)
    
    BIN_DIR = PROJECT_ROOT / bin_dir_name
    SCRIPTS_DIR = PROJECT_ROOT / scripts_dir_name
    MODULES_DIR = PROJECT_ROOT / modules_dir_name
    DOCS_DIR = PROJECT_ROOT / docs_dir_name
    
    logger.debug(f"BIN_DIR set to: {BIN_DIR.as_posix()}")
    logger.debug(f"SCRIPTS_DIR set to: {SCRIPTS_DIR.as_posix()}")

    # --- MODIFIED: Ph√¢n t√≠ch ƒë·ªëi s·ªë ---
    parser = argparse.ArgumentParser(description="Bootstrap (kh·ªüi t·∫°o) m·ªôt tool utility m·ªõi t·ª´ file *.spec.toml.")
    parser.add_argument(
        "spec_file_path_str", 
        type=str, 
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file *.spec.toml (v√≠ d·ª•: docs/drafts/new_tool.spec.toml)."
    )
    args = parser.parse_args()
    # --- END MODIFIED ---

    # --- MODIFIED: Load v√† x√°c th·ª±c ƒë∆∞·ªùng d·∫´n ---
    spec_file_path = Path(args.spec_file_path_str).resolve()

    if not spec_file_path.is_file() or not spec_file_path.name.endswith(".spec.toml"):
        logger.error(f"‚ùå L·ªói: ƒê∆∞·ªùng d·∫´n cung c·∫•p kh√¥ng ph·∫£i l√† file *.spec.toml h·ª£p l·ªá.")
        logger.error(f"   ƒê√£ nh·∫≠n: {spec_file_path.as_posix()}")
        sys.exit(1)
        
    logger.info(f"üöÄ B·∫Øt ƒë·∫ßu bootstrap:")
    try:
        spec_rel_path = spec_file_path.relative_to(PROJECT_ROOT).as_posix()
    except ValueError:
        spec_rel_path = spec_file_path.as_posix() # N·∫øu file spec n·∫±m ngo√†i project
    logger.info(f"   File Spec: {spec_rel_path}")
    # --- END MODIFIED ---

    # --- (Load TOML gi·ªØ nguy√™n) ---
    try:
        with open(spec_file_path, 'rb') as f:
            config = tomllib.load(f) # type: ignore[reportArgumentType]
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ƒë·ªçc file TOML: {e}")
        sys.exit(1)

    # --- MODIFIED: X√°c th·ª±c config ---
    try:
        # ƒê·ªçc c√°c gi√° tr·ªã meta
        tool_name = config['meta']['tool_name']
        script_file = config['meta']['script_file']
        module_name = config['meta']['module_name']
        
        # Truy·ªÅn module_name v√†o config dict ƒë·ªÉ d√πng trong generator
        config['module_name'] = module_name 
        
        logger.debug(f"Tool Name: {tool_name}")
        logger.debug(f"Script File: {script_file}")
        logger.debug(f"Module Name: {module_name}")
        
    except KeyError as e:
        logger.error(f"‚ùå File spec '{spec_file_path.name}' thi·∫øu key b·∫Øt bu·ªôc trong [meta]: {e}")
        sys.exit(1)
    
    # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n module d·ª±a tr√™n config
    module_path = MODULES_DIR / module_name
    logger.info(f"   Th∆∞ m·ª•c Module: {module_path.relative_to(PROJECT_ROOT).as_posix()}")
    # --- END MODIFIED ---
        
    # --- (T·∫°o n·ªôi dung gi·ªØ nguy√™n) ---
    try:
        mod_name = config['module_name']
        
        generated_content = {
            "bin": generate_bin_wrapper(config),
            "script": generate_script_entrypoint(config),
            "config": generate_module_file(config, "config"),
            "loader": generate_module_file(config, "loader"), 
            "core": generate_module_file(config, "core"),
            "executor": generate_module_file(config, "executor"),
            "init": generate_module_init_file(config), 
        }
        
        target_paths = {
            "bin": BIN_DIR / tool_name,
            "script": SCRIPTS_DIR / script_file,
            "config": module_path / f"{mod_name}_config.py",
            "loader": module_path / f"{mod_name}_loader.py", 
            "core": module_path / f"{mod_name}_core.py",
            "executor": module_path / f"{mod_name}_executor.py",
            "init": module_path / "__init__.py", 
        }
        
        if config.get('docs', {}).get('enabled', False):
            generated_content["docs"] = generate_doc_file(config)
            target_paths["docs"] = DOCS_DIR / "tools" / f"{tool_name}.md"

    except Exception as e:
        logger.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫°o n·ªôi dung code: {e}")
        logger.debug("Traceback:", exc_info=True)
        sys.exit(1)

    # --- MODIFIED: KI·ªÇM TRA AN TO√ÄN ---
    # Ki·ªÉm tra th∆∞ m·ª•c module tr∆∞·ªõc
    if module_path.exists():
        logger.error(f"‚ùå D·ª´ng l·∫°i! Th∆∞ m·ª•c module sau ƒë√£ t·ªìn t·∫°i. S·∫Ω kh√¥ng ghi ƒë√®:")
        logger.error(f"   -> {module_path.relative_to(PROJECT_ROOT).as_posix()}")
        sys.exit(1)
        
    existing_files = [p for p in target_paths.values() if p.exists()]
    if existing_files:
        logger.error(f"‚ùå D·ª´ng l·∫°i! C√°c file sau ƒë√£ t·ªìn t·∫°i. S·∫Ω kh√¥ng ghi ƒë√®:")
        for p in existing_files:
            logger.error(f"   -> {p.relative_to(PROJECT_ROOT).as_posix()}")
        sys.exit(1)
    # --- END MODIFIED ---

    # --- MODIFIED: GHI FILE (I/O) ---
    try:
        # T·∫°o th∆∞ m·ª•c module tr∆∞·ªõc
        module_path.mkdir(parents=True, exist_ok=True)
        logger.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c: {module_path.relative_to(PROJECT_ROOT).as_posix()}")
            
        for key, path in target_paths.items():
            content = generated_content[key]
            path.parent.mkdir(parents=True, exist_ok=True) 
            path.write_text(content, encoding='utf-8')
            
            relative_path = path.relative_to(PROJECT_ROOT).as_posix()
            log_success(logger, f"ƒê√£ t·∫°o: {relative_path}")

            if key == "bin":
                os.chmod(path, 0o755) # C·∫•p quy·ªÅn th·ª±c thi
                logger.info(f"   -> ƒê√£ c·∫•p quy·ªÅn executable (chmod +x)")
            
    except IOError as e:
        logger.error(f"‚ùå L·ªói I/O khi ghi file: {e}")
        sys.exit(1)
    # --- END MODIFIED ---
        
    logger.info("\n‚ú® Bootstrap ho√†n t·∫•t! C·∫•u tr√∫c file cho tool m·ªõi ƒë√£ s·∫µn s√†ng.")

if __name__ == "__main__":
    main()