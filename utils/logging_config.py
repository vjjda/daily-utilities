#!/usr/bin/env python
# Path: utils/logging_config.py

import logging
import sys
from pathlib import Path
# --- MODIFIED: Import c√°c h·∫±ng s·ªë m·ªõi ---
from .constants import LOG_DIR_PATH, FILE_LOG_LEVEL, CONSOLE_LOG_LEVEL
# --- END MODIFIED ---

# C·∫•p ƒë·ªô logging t√πy ch·ªânh cho console:
# ...

# --- MODIFIED: ƒê∆°n gi·∫£n h√≥a ch·ªØ k√Ω h√†m ---
def setup_logging(script_name: str, console_level_str: str = CONSOLE_LOG_LEVEL):
# --- END MODIFIED ---
    """
    C·∫•u h√¨nh logging cho script.
    - Ghi chi ti·∫øt (DEBUG) v√†o file log.
    - Ghi t·ªëi gi·∫£n (INFO/WARNING/ERROR) ra console (stdout).
    """
    
    # 1. Kh·ªüi t·∫°o logger
    logger = logging.getLogger(script_name)
    logger.setLevel(logging.DEBUG) # M·ª©c th·∫•p nh·∫•t

    if logger.hasHandlers():
        logger.handlers.clear()

    # --- MODIFIED: S·ª≠ d·ª•ng h·∫±ng s·ªë LOG_DIR_PATH ---
    # 2. T·∫°o th∆∞ m·ª•c logs (d√πng ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi)
    LOG_DIR_PATH.mkdir(exist_ok=True)
    # --- END MODIFIED ---
    
    # --- ƒê·ªãnh d·∫°ng cho File Log (Chi ti·∫øt) ---
    file_formatter = logging.Formatter(
        '[%(asctime)s] [%(levelname)-8s] (%(name)s) %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # --- File Handler ---
    # --- MODIFIED: S·ª≠ d·ª•ng LOG_DIR_PATH ---
    file_handler = logging.FileHandler(LOG_DIR_PATH / f'{script_name}.log')
    file_handler.setFormatter(file_formatter)
    # --- MODIFIED: S·ª≠ d·ª•ng h·∫±ng s·ªë FILE_LOG_LEVEL ---
    file_handler.setLevel(getattr(logging, FILE_LOG_LEVEL.upper(), logging.DEBUG))
    logger.addHandler(file_handler)
    # --- END MODIFIED ---

    # --- Console Handler (Th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng) ---
    console_formatter = logging.Formatter('%(message)s')
    
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(console_formatter)
    # --- MODIFIED: S·ª≠ d·ª•ng h·∫±ng s·ªë CONSOLE_LOG_LEVEL ---
    console_handler.setLevel(getattr(logging, console_level_str.upper(), logging.INFO))
    logger.addHandler(console_handler)
    # --- END MODIFIED ---

    return logger

# ----------------------------------------------------------------------
# H√†m Helper ƒë·ªÉ t·∫°o ƒë·∫ßu ra console th√¢n thi·ªán
# ----------------------------------------------------------------------

def log_start(logger, message: str):
    """Logs start message with emoji to INFO level (visible on console)."""
    logger.info(f"üöÄ {message}")

def log_success(logger, message: str):
    """Logs success message with emoji to INFO level (visible on console)."""
    logger.info(f"‚úÖ {message}")
    
# Ta lo·∫°i b·ªè log_warning, log_error. 
# Ng∆∞·ªùi d√πng s·∫Ω d√πng: logger.warning("‚ö†Ô∏è Warning message"), logger.error("‚ùå Error message")