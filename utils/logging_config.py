# Path: utils/logging_config.py
"""
C·∫•u h√¨nh logging t·∫≠p trung cho d·ª± √°n.

Cung c·∫•p h√†m `setup_logging` ƒë·ªÉ t·∫°o logger v·ªõi c·∫•u h√¨nh chu·∫©n:
- Ghi chi ti·∫øt (DEBUG) v√†o file log trong th∆∞ m·ª•c `logs/`.
- Ghi t·ªëi gi·∫£n (INFO+) ra console (stdout).
- S·ª≠ d·ª•ng emoji cho c√°c th√¥ng b√°o console quan tr·ªçng.
"""

import logging
import sys
from pathlib import Path
from typing import Final

# Import c√°c h·∫±ng s·ªë c·∫•u h√¨nh logging
from .constants import LOG_DIR_PATH, FILE_LOG_LEVEL, CONSOLE_LOG_LEVEL

# ƒê·ªãnh nghƒ©a c√°c c·∫•p ƒë·ªô log t√πy ch·ªânh (v√≠ d·ª•)
# SUCCESS = 25
# logging.addLevelName(SUCCESS, "SUCCESS")

# def log_success(self, message, *args, **kws):
#     if self.isEnabledFor(SUCCESS):
#         self._log(SUCCESS, message, args, **kws)
# logging.Logger.success = log_success


def setup_logging(script_name: str, console_level_str: str = CONSOLE_LOG_LEVEL) -> logging.Logger:
    """
    C·∫•u h√¨nh v√† tr·∫£ v·ªÅ m·ªôt logger cho m·ªôt script c·ª• th·ªÉ.

    Args:
        script_name: T√™n c·ªßa script (s·∫Ω ƒë∆∞·ª£c d√πng l√†m t√™n logger v√† t√™n file log).
        console_level_str: C·∫•p ƒë·ªô log t·ªëi thi·ªÉu cho console (v√≠ d·ª•: "INFO", "DEBUG").

    Returns:
        ƒê·ªëi t∆∞·ª£ng `logging.Logger` ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.
    """

    # 1. Kh·ªüi t·∫°o logger
    logger = logging.getLogger(script_name)
    logger.setLevel(logging.DEBUG) # Lu√¥n b·∫Øt t·∫•t c·∫£ ·ªü logger g·ªëc

    # X√≥a c√°c handler c≈© n·∫øu c√≥ (tr√°nh log l·∫∑p l·∫°i khi g·ªçi h√†m nhi·ªÅu l·∫ßn)
    if logger.hasHandlers():
        logger.handlers.clear()

    # 2. ƒê·∫£m b·∫£o th∆∞ m·ª•c logs t·ªìn t·∫°i
    try:
        LOG_DIR_PATH.mkdir(exist_ok=True)
    except OSError as e:
        print(f"L·ªói: Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c log t·∫°i '{LOG_DIR_PATH}': {e}", file=sys.stderr) #
        # C√≥ th·ªÉ tho√°t ·ªü ƒë√¢y ho·∫∑c ƒë·ªÉ logger kh√¥ng ghi file
        # sys.exit(1)

    # --- 3. C·∫•u h√¨nh File Handler (ghi chi ti·∫øt) ---
    try:
        file_formatter = logging.Formatter(
            '[%(asctime)s] [%(levelname)-8s] (%(name)s) %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler = logging.FileHandler(LOG_DIR_PATH / f'{script_name}.log', encoding='utf-8') #
        file_handler.setFormatter(file_formatter)
        file_handler.setLevel(getattr(logging, FILE_LOG_LEVEL.upper(), logging.DEBUG))
        logger.addHandler(file_handler)
    except Exception as e:
        print(f"L·ªói: Kh√¥ng th·ªÉ c·∫•u h√¨nh ghi log v√†o file: {e}", file=sys.stderr) #

    # --- 4. C·∫•u h√¨nh Console Handler (ghi t·ªëi gi·∫£n) ---
    try:
        # ƒê·ªãnh d·∫°ng ƒë∆°n gi·∫£n cho console
        console_formatter = logging.Formatter('%(message)s')
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(console_formatter)
        # L·∫•y c·∫•p ƒë·ªô t·ª´ tham s·ªë ho·∫∑c h·∫±ng s·ªë, fallback v·ªÅ INFO n·∫øu kh√¥ng h·ª£p l·ªá
        console_level = getattr(logging, console_level_str.upper(), logging.INFO)
        console_handler.setLevel(console_level)
        logger.addHandler(console_handler)
    except Exception as e:
        print(f"L·ªói: Kh√¥ng th·ªÉ c·∫•u h√¨nh ghi log ra console: {e}", file=sys.stderr) #

    return logger

# ----------------------------------------------------------------------
# C√°c h√†m Helper ƒë·ªÉ log th√¥ng b√°o console th√¢n thi·ªán
# ----------------------------------------------------------------------

def log_start(logger: logging.Logger, message: str) -> None:
    """Ghi log th√¥ng b√°o b·∫Øt ƒë·∫ßu (INFO) v·ªõi emoji üöÄ."""
    logger.info(f"üöÄ {message}")

def log_success(logger: logging.Logger, message: str) -> None:
    """Ghi log th√¥ng b√°o th√†nh c√¥ng (INFO) v·ªõi emoji ‚úÖ."""
    logger.info(f"‚úÖ {message}")

# L∆∞u √Ω: C√°c h√†m log_warning v√† log_error kh√¥ng c·∫ßn thi·∫øt v√¨
# logger.warning() v√† logger.error() ƒë√£ ƒë·ªß r√µ r√†ng.
# Ch·ªâ c·∫ßn th√™m emoji khi g·ªçi: logger.warning(f"‚ö†Ô∏è C·∫£nh b√°o...")
#                          logger.error(f"‚ùå L·ªói...")